Index: src/main/java/net/dv8tion/jda/api/utils/FileProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/utils/FileProxy.java b/src/main/java/net/dv8tion/jda/api/utils/FileProxy.java
--- a/src/main/java/net/dv8tion/jda/api/utils/FileProxy.java	(revision 1e25ede9568d3fea946a879b77cd7c626834065b)
+++ b/src/main/java/net/dv8tion/jda/api/utils/FileProxy.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
@@ -199,7 +199,7 @@
     protected CompletableFuture<Path> downloadToPath(String url, Path path)
     {
         //Check if the parent path, the folder, exists
-        Checks.check(Files.notExists(path.getParent()), "Parent folder of the file '" + path.toAbsolutePath() + "' does not exist.");
+        Checks.check(Files.exists(path.getParent()), "Parent folder of the file '" + path.toAbsolutePath() + "' does not exist.");
 
         final DownloadTask downloadTask = downloadInternal(url);
 
Index: src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java b/src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/EntityBuilder.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -29,6 +29,7 @@
 import net.dv8tion.jda.api.entities.Guild.Timeout;
 import net.dv8tion.jda.api.entities.Guild.VerificationLevel;
 import net.dv8tion.jda.api.entities.MessageEmbed.*;
+import net.dv8tion.jda.api.entities.sticker.*;
 import net.dv8tion.jda.api.entities.templates.Template;
 import net.dv8tion.jda.api.entities.templates.TemplateChannel;
 import net.dv8tion.jda.api.entities.templates.TemplateGuild;
@@ -40,6 +41,7 @@
 import net.dv8tion.jda.api.events.user.update.UserUpdateDiscriminatorEvent;
 import net.dv8tion.jda.api.events.user.update.UserUpdateFlagsEvent;
 import net.dv8tion.jda.api.events.user.update.UserUpdateNameEvent;
+import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.utils.cache.CacheFlag;
 import net.dv8tion.jda.api.utils.cache.CacheView;
@@ -48,6 +50,7 @@
 import net.dv8tion.jda.internal.JDAImpl;
 import net.dv8tion.jda.internal.entities.mixin.channel.attribute.IPermissionContainerMixin;
 import net.dv8tion.jda.internal.entities.mixin.channel.middleman.AudioChannelMixin;
+import net.dv8tion.jda.internal.entities.sticker.*;
 import net.dv8tion.jda.internal.handle.EventCache;
 import net.dv8tion.jda.internal.utils.Helpers;
 import net.dv8tion.jda.internal.utils.JDALogger;
@@ -161,16 +164,34 @@
         }
     }
 
-    public TLongObjectMap<DataObject> convertToUserMap(ToLongFunction<DataObject> getId, DataArray array)
+    private void createGuildStickerPass(GuildImpl guildObj, DataArray array)
     {
-        TLongObjectMap<DataObject> map = new TLongObjectHashMap<>();
-        for (int i = 0; i < array.length(); i++)
-        {
-            DataObject obj = array.getObject(i);
-            long userId = getId.applyAsLong(obj);
-            map.put(userId, obj);
+        if (!getJDA().isCacheFlagSet(CacheFlag.STICKER))
+            return;
+        SnowflakeCacheViewImpl<GuildSticker> stickerView = guildObj.getStickersView();
+        try (UnlockHook hook = stickerView.writeLock())
+        {
+            TLongObjectMap<GuildSticker> stickerMap = stickerView.getMap();
+            for (int i = 0; i < array.length(); i++)
+            {
+                DataObject object = array.getObject(i);
+                if (object.isNull("id"))
+                {
+                    LOG.error("Received GUILD_CREATE with a sticker with a null ID. GuildId: {} JSON: {}",
+                              guildObj.getId(), object);
+                    continue;
+                }
+                if (object.getInt("type", -1) != Sticker.Type.GUILD.getId())
+                {
+                    LOG.error("Received GUILD_CREATE with sticker that had an unexpected type. GuildId: {} Type: {} JSON: {}",
+                              guildObj.getId(), object.getInt("type", -1), object);
+                    continue;
+                }
+
+                RichSticker sticker = createRichSticker(object);
+                stickerMap.put(sticker.getIdLong(), (GuildSticker) sticker);
+            }
         }
-        return map;
     }
 
     public GuildImpl createGuild(long guildId, DataObject guildJson, TLongObjectMap<DataObject> members, int memberCount)
@@ -187,6 +208,7 @@
         final DataArray channelArray = guildJson.getArray("channels");
         final DataArray threadArray = guildJson.getArray("threads");
         final DataArray emotesArray = guildJson.getArray("emojis");
+        final DataArray stickersArray = guildJson.getArray("stickers");
         final DataArray voiceStateArray = guildJson.getArray("voice_states");
         final Optional<DataArray> featuresArray = guildJson.optArray("features");
         final Optional<DataArray> presencesArray = guildJson.optArray("presences");
@@ -260,8 +282,8 @@
             createGuildChannel(guildObj, channelJson);
         }
 
-        TLongObjectMap<DataObject> voiceStates = convertToUserMap((o) -> o.getUnsignedLong("user_id", 0L), voiceStateArray);
-        TLongObjectMap<DataObject> presences = presencesArray.map(o1 -> convertToUserMap(o2 -> o2.getObject("user").getUnsignedLong("id"), o1)).orElseGet(TLongObjectHashMap::new);
+        TLongObjectMap<DataObject> voiceStates = Helpers.convertToMap((o) -> o.getUnsignedLong("user_id", 0L), voiceStateArray);
+        TLongObjectMap<DataObject> presences = presencesArray.map(o1 -> Helpers.convertToMap(o2 -> o2.getObject("user").getUnsignedLong("id"), o1)).orElseGet(TLongObjectHashMap::new);
         try (UnlockHook h1 = guildObj.getMembersView().writeLock();
              UnlockHook h2 = getJDA().getUsersView().writeLock())
         {
@@ -298,6 +320,7 @@
         }
 
         createGuildEmotePass(guildObj, emotesArray);
+        createGuildStickerPass(guildObj, stickersArray);
         guildJson.optArray("stage_instances")
                 .map(arr -> arr.stream(DataArray::getObject))
                 .ifPresent(list -> list.forEach(it -> createStageInstance(guildObj, it)));
@@ -1424,7 +1447,7 @@
         final List<Message.Attachment> attachments = map(jsonObject, "attachments",   this::createMessageAttachment);
         final List<MessageEmbed>       embeds      = map(jsonObject, "embeds",        this::createMessageEmbed);
         final List<MessageReaction>    reactions   = map(jsonObject, "reactions",     (obj) -> createMessageReaction(tmpChannel, id, obj));
-        final List<MessageSticker>     stickers    = map(jsonObject, "sticker_items", this::createSticker);
+        final List<StickerItem>        stickers    = map(jsonObject, "sticker_items", this::createStickerItem);
 
         // Message activity (for game invites/spotify)
         MessageActivity activity = null;
@@ -1719,25 +1742,72 @@
             color, thumbnail, siteProvider, author, videoInfo, footer, image, fields);
     }
 
-    public MessageSticker createSticker(DataObject content)
+    public StickerItem createStickerItem(DataObject content)
     {
-        final long id = content.getLong("id");
-        final String name = content.getString("name");
-        final String description = content.getString("description", "");
-        final long packId = content.getLong("pack_id", content.getLong("guild_id", 0L));
-        final MessageSticker.StickerFormat format = MessageSticker.StickerFormat.fromId(content.getInt("format_type"));
-        final Set<String> tags;
-        if (content.isNull("tags"))
+        long id = content.getLong("id");
+        String name = content.getString("name");
+        Sticker.StickerFormat format = Sticker.StickerFormat.fromId(content.getInt("format_type"));
+        return new StickerItemImpl(id, format, name);
+    }
+
+    public RichStickerImpl createRichSticker(DataObject content)
+    {
+        long id = content.getLong("id");
+        String name = content.getString("name");
+        Sticker.StickerFormat format = Sticker.StickerFormat.fromId(content.getInt("format_type"));
+        Sticker.Type type = Sticker.Type.fromId(content.getInt("type", -1));
+
+        String description = content.getString("description", "");
+        Set<String> tags = Collections.emptySet();
+        if (!content.isNull("tags"))
         {
-            tags = Collections.emptySet();
-        }
-        else
-        {
-            final String[] split = content.getString("tags").split(", ");
-            final Set<String> tmp = new HashSet<>(Arrays.asList(split));
-            tags = Collections.unmodifiableSet(tmp);
+            String[] array = content.getString("tags").split(",\\s*");
+            tags = Helpers.setOf(array);
+        }
+
+        switch (type)
+        {
+        case GUILD:
+            boolean available = content.getBoolean("available");
+            long guildId = content.getUnsignedLong("guild_id", 0L);
+            User owner = content.isNull("user") ? null : createUser(content.getObject("user"));
+            return new GuildStickerImpl(id, format, name, tags, description, available, guildId, api, owner);
+        case STANDARD:
+            long packId = content.getUnsignedLong("pack_id", 0L);
+            int sortValue = content.getInt("sort_value", -1);
+            return new StandardStickerImpl(id, format, name, tags, description, packId, sortValue);
+        default:
+            throw new IllegalArgumentException("Unknown sticker type. Type: " + type  +" JSON: " + content);
+        }
+    }
+
+    public StickerPack createStickerPack(DataObject content)
+    {
+        long id = content.getUnsignedLong("id");
+        String name = content.getString("name");
+        String description = content.getString("description", "");
+        long skuId = content.getUnsignedLong("sku_id", 0);
+        long coverId = content.getUnsignedLong("cover_sticker_id", 0);
+        long bannerId = content.getUnsignedLong("banner_asset_id", 0);
+
+        DataArray stickerArr = content.getArray("stickers");
+        List<StandardSticker> stickers = new ArrayList<>(stickerArr.length());
+        for (int i = 0; i < stickerArr.length(); i++)
+        {
+            DataObject object = null;
+            try
+            {
+                object = stickerArr.getObject(i);
+                StandardSticker sticker = (StandardSticker) createRichSticker(object);
+                stickers.add(sticker);
+            }
+            catch (ParsingException | ClassCastException ex)
+            {
+                LOG.error("Sticker contained in pack {} ({}) could not be parsed. JSON: {}", name, id, object);
+            }
         }
-        return new MessageSticker(id, name, description, packId, format, tags);
+
+        return new StickerPackImpl(id, stickers, name, description, coverId, bannerId, skuId);
     }
 
     public Message.Interaction createMessageInteraction(GuildImpl guildImpl, DataObject content)
Index: src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java b/src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java
--- a/src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/handle/GuildMembersChunkHandler.java	(revision 0b342740124fdca8173a18509fa7b11afbc6fde4)
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.entities.MemberImpl;
 import net.dv8tion.jda.internal.requests.WebSocketClient;
+import net.dv8tion.jda.internal.utils.Helpers;
 
 public class GuildMembersChunkHandler extends SocketHandler
 {
@@ -48,7 +49,7 @@
             // Chunk handling
             EntityBuilder builder = getJDA().getEntityBuilder();
             TLongObjectMap<DataObject> presences = content.optArray("presences").map(it ->
-                builder.convertToUserMap(o -> o.getObject("user").getUnsignedLong("id"), it)
+                Helpers.convertToMap(o -> o.getObject("user").getUnsignedLong("id"), it)
             ).orElseGet(TLongObjectHashMap::new);
             for (int i = 0; i < members.length(); i++)
             {
Index: src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java b/src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/MemberChunkManager.java	(revision 0b342740124fdca8173a18509fa7b11afbc6fde4)
@@ -25,6 +25,7 @@
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.entities.GuildImpl;
 import net.dv8tion.jda.internal.entities.MemberImpl;
+import net.dv8tion.jda.internal.utils.Helpers;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -193,7 +194,7 @@
             EntityBuilder builder = guild.getJDA().getEntityBuilder();
             DataArray memberArray = chunk.getArray("members");
             TLongObjectMap<DataObject> presences = chunk.optArray("presences").map(it ->
-                builder.convertToUserMap(o -> o.getObject("user").getUnsignedLong("id"), it)
+                Helpers.convertToMap(o -> o.getObject("user").getUnsignedLong("id"), it)
             ).orElseGet(TLongObjectHashMap::new);
             List<Member> collect = new ArrayList<>(memberArray.length());
             for (int i = 0; i < memberArray.length(); i++)
Index: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java b/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/PaginationActionImpl.java	(revision 0b342740124fdca8173a18509fa7b11afbc6fde4)
@@ -34,8 +34,8 @@
 import java.util.function.Consumer;
 
 public abstract class PaginationActionImpl<T, M extends PaginationAction<T, M>>
-    extends RestActionImpl<List<T>>
-    implements PaginationAction<T, M>
+        extends RestActionImpl<List<T>>
+        implements PaginationAction<T, M>
 {
     protected final List<T> cached = new CopyOnWriteArrayList<>();
     protected final int maxLimit;
@@ -245,7 +245,8 @@
     @Override
     public CompletableFuture<List<T>> takeAsync(int amount)
     {
-        return takeAsync0(amount, (task, list) -> forEachAsync(val -> {
+        return takeAsync0(amount, (task, list) -> forEachAsync(val ->
+        {
             list.add(val);
             return list.size() < amount;
         }, task::completeExceptionally));
@@ -255,7 +256,8 @@
     @Override
     public CompletableFuture<List<T>> takeRemainingAsync(int amount)
     {
-        return takeAsync0(amount, (task, list) -> forEachRemainingAsync(val -> {
+        return takeAsync0(amount, (task, list) -> forEachRemainingAsync(val ->
+        {
             list.add(val);
             return list.size() < amount;
         }, task::completeExceptionally));
@@ -347,20 +349,39 @@
         }
     }
 
+    // Introduced for paginating archived threads, because two endpoints require a different request parameter value format.
+    // May become more useful if discord introduces more pagination endpoints not using ids.
+    // Check ThreadChannelPaginationActionImpl
+    // Background of #getPaginationLastEvaluatedKey:
+    //     Archived thread channel pagination (example: TextChannel#retrieveArchivedPublicThreadChannels) would throw an exception,
+    //     where Discord complained about receiving a snowflake instead of an ISO8601 date.
+    //     The snowflake originated from this class (creating initial & subsequent requests),
+    //     while the correct value was set in ThreadChannelPaginationActionImpl for the initial request
+    //     and appended as a second value for subsequent requests.
+    //     However, withQueryParams is a simple string append and Discord only reads the first parameter.
+    //     If you debugged, you would see some duplicated fields on the compiled route.
+    //     The fix here is to let the implementor supply the "last" string value, which could be anything,
+    //     while the default implementation still would provide snowflakes
+    @Nonnull
+    protected String getPaginationLastEvaluatedKey(long lastId, T last)
+    {
+        return Long.toUnsignedString(lastId);
+    }
+
     @Override
     protected Route.CompiledRoute finalizeRoute()
     {
         Route.CompiledRoute route = super.finalizeRoute();
 
         final String limit = String.valueOf(this.getLimit());
-        final long last = this.lastKey;
+        final long localLastKey = this.lastKey;
 
         route = route.withQueryParams("limit", limit);
 
-        if (last != 0)
-            route = route.withQueryParams(order.getKey(), Long.toUnsignedString(last));
+        if (localLastKey != 0)
+            route = route.withQueryParams(order.getKey(), getPaginationLastEvaluatedKey(localLastKey, this.last));
         else if (order == PaginationOrder.FORWARD)
-            route = route.withQueryParams("after", "0");
+            route = route.withQueryParams("after", getPaginationLastEvaluatedKey(0, this.last));
 
         return route;
     }
Index: src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java b/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/restaction/pagination/ThreadChannelPaginationActionImpl.java	(revision 0b342740124fdca8173a18509fa7b11afbc6fde4)
@@ -9,13 +9,16 @@
 import net.dv8tion.jda.api.requests.Request;
 import net.dv8tion.jda.api.requests.Response;
 import net.dv8tion.jda.api.requests.restaction.pagination.ThreadChannelPaginationAction;
-import net.dv8tion.jda.api.utils.TimeUtil;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.entities.EntityBuilder;
 import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.internal.utils.Helpers;
 
 import javax.annotation.Nonnull;
+import java.time.OffsetDateTime;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
@@ -23,6 +26,9 @@
 public class ThreadChannelPaginationActionImpl extends PaginationActionImpl<ThreadChannel, ThreadChannelPaginationAction> implements ThreadChannelPaginationAction
 {
     protected final IThreadContainer channel;
+
+    // Whether IDs or ISO8601 timestamps shall be provided for all pagination requests.
+    // Some thread pagination endpoints require this odd and singular behavior throughout the discord api.
     protected final boolean useID;
 
     public ThreadChannelPaginationActionImpl(JDA api, Route.CompiledRoute route, IThreadContainer channel, boolean useID)
@@ -46,23 +52,27 @@
         return EnumSet.of(PaginationOrder.BACKWARD);
     }
 
+    //Thread pagination supplies ISO8601 timestamps for some cases, see constructor
+    @Nonnull
     @Override
-    protected Route.CompiledRoute finalizeRoute()
+    protected String getPaginationLastEvaluatedKey(long lastId, ThreadChannel last)
     {
-        Route.CompiledRoute route = super.finalizeRoute();
-
-        final String limit = String.valueOf(this.limit.get());
-        final long last = this.lastKey;
-
-        route = route.withQueryParams("limit", limit);
-
-        if (last == 0)
-            return route;
-
         if (useID)
-            return route.withQueryParams("before", Long.toUnsignedString(last));
+            return Long.toUnsignedString(lastId);
+
+        if (order == PaginationOrder.FORWARD && lastId == 0)
+        {
+            // first second of 2015 aka discords epoch, hard coding something older makes no sense to me
+            return "2015-01-01T00:00:00.000";
+        }
+
+        // this should be redundant, due to calling this with PaginationAction#getLast() as last param,
+        // but let's have this here.
+        if (last == null)
+            return OffsetDateTime.now(ZoneOffset.UTC).toString();
+
         // OffsetDateTime#toString() is defined to be ISO8601, needs no helper method.
-        return route.withQueryParams("before", TimeUtil.getTimeCreated(last).toString());
+        return last.getTimeArchiveInfoLastModified().toString();
     }
 
     @Override
@@ -75,14 +85,7 @@
         List<ThreadChannel> list = new ArrayList<>(threads.length());
         EntityBuilder builder = api.getEntityBuilder();
 
-        TLongObjectMap<DataObject> selfThreadMemberMap = new TLongObjectHashMap<>();
-        for (int i = 0; i < selfThreadMembers.length(); i++)
-        {
-            DataObject selfThreadMember = selfThreadMembers.getObject(i);
-
-            //Store the thread member based on the "id" which is the _thread's_ id, not the member's id (which would be our id)
-            selfThreadMemberMap.put(selfThreadMember.getLong("id"), selfThreadMember);
-        }
+        TLongObjectMap<DataObject> selfThreadMemberMap = Helpers.convertToMap((o) -> o.getUnsignedLong("id"), selfThreadMembers);
 
         for (int i = 0; i < threads.length(); i++)
         {
Index: src/main/java/net/dv8tion/jda/internal/utils/Helpers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/utils/Helpers.java b/src/main/java/net/dv8tion/jda/internal/utils/Helpers.java
--- a/src/main/java/net/dv8tion/jda/internal/utils/Helpers.java	(revision 555adcbd76a9baf46ee19b30b1a0dc25fe7312a5)
+++ b/src/main/java/net/dv8tion/jda/internal/utils/Helpers.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -16,12 +16,18 @@
 
 package net.dv8tion.jda.internal.utils;
 
+import gnu.trove.map.TLongObjectMap;
+import gnu.trove.map.hash.TLongObjectHashMap;
+import net.dv8tion.jda.api.utils.data.DataArray;
+import net.dv8tion.jda.api.utils.data.DataObject;
+
 import javax.annotation.Nullable;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.time.temporal.TemporalAccessor;
 import java.util.*;
 import java.util.function.Consumer;
+import java.util.function.ToLongFunction;
 
 /**
  * This class has major inspiration from <a href="https://commons.apache.org/proper/commons-lang/" target="_blank">Lang 3</a>
@@ -225,6 +231,26 @@
         return col == null || col.isEmpty() ? EnumSet.noneOf(clazz) : EnumSet.copyOf(col);
     }
 
+    @SafeVarargs
+    public static <T> Set<T> setOf(T... elements)
+    {
+        Set<T> set = new HashSet<>(elements.length);
+        Collections.addAll(set, elements);
+        return set;
+    }
+
+    public static TLongObjectMap<DataObject> convertToMap(ToLongFunction<DataObject> getId, DataArray array)
+    {
+        TLongObjectMap<DataObject> map = new TLongObjectHashMap<>();
+        for (int i = 0; i < array.length(); i++)
+        {
+            DataObject obj = array.getObject(i);
+            long objId = getId.applyAsLong(obj);
+            map.put(objId, obj);
+        }
+        return map;
+    }
+
     // ## ExceptionUtils ##
 
     public static <T extends Throwable> T appendCause(T throwable, Throwable cause)
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision 0b342740124fdca8173a18509fa7b11afbc6fde4)
+++ b/build.gradle.kts	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
@@ -40,7 +40,7 @@
 }
 
 val javaVersion = JavaVersion.current()
-val versionObj = Version(major = "5", minor = "0", revision = "0", classifier = "alpha.11")
+val versionObj = Version(major = "5", minor = "0", revision = "0", classifier = "alpha.12")
 val isCI = System.getProperty("BUILD_NUMBER") != null // jenkins
         || System.getenv("BUILD_NUMBER") != null
         || System.getProperty("GIT_COMMIT") != null // jitpack
Index: src/main/java/net/dv8tion/jda/api/JDA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/JDA.java b/src/main/java/net/dv8tion/jda/api/JDA.java
--- a/src/main/java/net/dv8tion/jda/api/JDA.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/JDA.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.api.entities.*;
 import net.dv8tion.jda.api.entities.channel.IGuildChannelContainer;
+import net.dv8tion.jda.api.entities.sticker.*;
 import net.dv8tion.jda.api.hooks.IEventManager;
 import net.dv8tion.jda.api.interactions.commands.Command;
 import net.dv8tion.jda.api.interactions.commands.build.CommandData;
@@ -1531,6 +1532,41 @@
         return getEmoteCache().getElementsByName(name, ignoreCase);
     }
 
+    /**
+     * Attempts to retrieve a {@link Sticker} object based on the provided snowflake reference.
+     * <br>This works for both {@link StandardSticker} and {@link GuildSticker}, and you can resolve them using the provided {@link StickerUnion}.
+     *
+     * <p>If the sticker is not one of the supported {@link Sticker.Type Types}, the request fails with {@link IllegalArgumentException}.
+     *
+     * <p>The returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} can encounter the following Discord errors:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_STICKER UNKNOWN_STICKER}
+     *     <br>Occurs when the provided id does not refer to a sticker known by Discord.</li>
+     * </ul>
+     *
+     * @param  sticker
+     *         The reference of the requested {@link Sticker}.
+     *         <br>Can be {@link RichSticker}, {@link StickerItem}, or {@link Sticker#fromId(long)}.
+     *
+     * @throws IllegalArgumentException
+     *         If the provided sticker is null
+     *
+     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type: {@link StickerUnion}
+     *         <br>On request, gets the sticker with id matching provided id from Discord.
+     */
+    @Nonnull
+    @CheckReturnValue
+    RestAction<StickerUnion> retrieveSticker(@Nonnull StickerSnowflake sticker);
+
+    /**
+     * Retrieves a list of all the public {@link StickerPack StickerPacks} used for nitro.
+     *
+     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type: List of {@link StickerPack}
+     */
+    @Nonnull
+    @CheckReturnValue
+    RestAction<List<StickerPack>> retrieveNitroStickerPacks();
+
     /**
      * The EventManager used by this JDA instance.
      *
Index: src/main/java/net/dv8tion/jda/api/MessageBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/MessageBuilder.java b/src/main/java/net/dv8tion/jda/api/MessageBuilder.java
--- a/src/main/java/net/dv8tion/jda/api/MessageBuilder.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/MessageBuilder.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -16,6 +16,8 @@
 package net.dv8tion.jda.api;
 
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.Sticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.restaction.MessageAction;
@@ -26,6 +28,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.util.*;
+import java.util.stream.Collectors;
 
 /**
  * Builder system used to build {@link net.dv8tion.jda.api.entities.Message Messages}.
@@ -43,6 +46,7 @@
 
     protected final List<MessageEmbed> embeds = new ArrayList<>();
     protected final List<LayoutComponent> components = new ArrayList<>();
+    protected final List<StickerSnowflake> stickers = new ArrayList<>();
     protected boolean isTTS = false;
     protected String nonce;
     protected EnumSet<Message.MentionType> allowedMentions = null;
@@ -74,6 +78,14 @@
                     this.allowedMentions = Helpers.copyEnumSet(Message.MentionType.class, data.getAllowedMentions());
                 Collections.addAll(this.mentionedUsers, data.getMentionedUsersWhitelist());
                 Collections.addAll(this.mentionedRoles, data.getMentionedRolesWhitelist());
+                stickers.addAll(data.getStickerSnowflakes());
+            }
+            else
+            {
+                stickers.addAll(message.getStickers().stream()
+                        .map(Sticker::getId)
+                        .map(Sticker::fromId)
+                        .collect(Collectors.toList()));
             }
         }
     }
@@ -87,6 +99,7 @@
             this.nonce = builder.nonce;
             this.embeds.addAll(builder.embeds);
             this.components.addAll(builder.components);
+            this.stickers.addAll(builder.stickers);
             if (builder.allowedMentions != null)
                 this.allowedMentions = Helpers.copyEnumSet(Message.MentionType.class, builder.allowedMentions);
             this.mentionedRoles.addAll(builder.mentionedRoles);
@@ -221,6 +234,59 @@
         return setActionRows(Arrays.asList(rows));
     }
 
+    /**
+     * Set the stickers to send alongside this message.
+     * <br>This is not supported for message edits.
+     *
+     * @param  stickers
+     *         The stickers to send, or null to not send any stickers
+     *
+     * @throws IllegalArgumentException
+     *         If more than {@value Message#MAX_STICKER_COUNT} stickers or null stickers are provided
+     *
+     * @return The MessageBuilder instance. Useful for chaining.
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    public MessageBuilder setStickers(@Nullable Collection<? extends StickerSnowflake> stickers)
+    {
+        this.stickers.clear();
+        if (stickers == null || stickers.isEmpty())
+            return this;
+        Checks.noneNull(stickers, "Stickers");
+        Checks.check(stickers.size() <= Message.MAX_STICKER_COUNT,
+                "Cannot send more than %d stickers in a message!", Message.MAX_STICKER_COUNT);
+
+        stickers.stream()
+                .map(StickerSnowflake::getId)
+                .map(StickerSnowflake::fromId)
+                .forEach(this.stickers::add);
+        return this;
+    }
+
+    /**
+     * Set the stickers to send alongside this message.
+     * <br>This is not supported for message edits.
+     *
+     * @param  stickers
+     *         The stickers to send, or null to not send any stickers
+     *
+     * @throws IllegalArgumentException
+     *         If more than {@value Message#MAX_STICKER_COUNT} stickers or null stickers are provided
+     *
+     * @return The MessageBuilder instance. Useful for chaining.
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    public MessageBuilder setStickers(@Nullable StickerSnowflake... stickers)
+    {
+        if (stickers != null)
+            Checks.noneNull(stickers, "Stickers");
+        return setStickers(stickers == null ? null : Arrays.asList(stickers));
+    }
+
     /**
      * Sets the <a href="https://en.wikipedia.org/wiki/Cryptographic_nonce" target="_blank">nonce</a>
      * of the built message(s). It is recommended to have only 100% unique strings to validate messages via this nonce.
@@ -1023,7 +1089,9 @@
 
         String[] ids = new String[0];
         return new DataMessage(isTTS, message, nonce, embeds,
-                allowedMentions, mentionedUsers.toArray(ids), mentionedRoles.toArray(ids), components.toArray(new LayoutComponent[0]));
+                allowedMentions, mentionedUsers.toArray(ids), mentionedRoles.toArray(ids),
+                components.toArray(new LayoutComponent[0]),
+                new ArrayList<>(stickers));
     }
 
     /**
@@ -1091,7 +1159,9 @@
     {
         String[] ids = new String[0];
         return new DataMessage(isTTS, builder.substring(beginIndex, endIndex), null, null,
-                allowedMentions, mentionedUsers.toArray(ids), mentionedRoles.toArray(ids), components.toArray(new LayoutComponent[0]));
+                allowedMentions, mentionedUsers.toArray(ids), mentionedRoles.toArray(ids),
+                components.toArray(new LayoutComponent[0]),
+                new ArrayList<>(stickers));
     }
 
     private String[] toStringArray(long[] users)
Index: src/main/java/net/dv8tion/jda/api/entities/Guild.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/Guild.java b/src/main/java/net/dv8tion/jda/api/entities/Guild.java
--- a/src/main/java/net/dv8tion/jda/api/entities/Guild.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/entities/Guild.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.Region;
 import net.dv8tion.jda.api.entities.channel.IGuildChannelContainer;
+import net.dv8tion.jda.api.entities.sticker.*;
 import net.dv8tion.jda.api.entities.templates.Template;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.interactions.commands.Command;
@@ -27,6 +28,7 @@
 import net.dv8tion.jda.api.interactions.commands.privileges.CommandPrivilege;
 import net.dv8tion.jda.api.managers.AudioManager;
 import net.dv8tion.jda.api.managers.GuildManager;
+import net.dv8tion.jda.api.managers.GuildStickerManager;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.*;
@@ -36,6 +38,7 @@
 import net.dv8tion.jda.api.requests.restaction.pagination.AuditLogPaginationAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.BanPaginationAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.PaginationAction;
+import net.dv8tion.jda.api.utils.FileUpload;
 import net.dv8tion.jda.api.utils.ImageProxy;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.cache.CacheFlag;
@@ -1742,6 +1745,106 @@
     @Nonnull
     SnowflakeCacheView<Emote> getEmoteCache();
 
+    /**
+     * Gets a {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildSticker} from this guild that has the same id as the
+     * one provided.
+     * <br>If there is no {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildSticker} with an id that matches the provided
+     * one, then this returns {@code null}.
+     *
+     * <p>This requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER CacheFlag.STICKER} to be enabled!
+     *
+     * @param  id
+     *         the sticker id
+     *
+     * @throws java.lang.NumberFormatException
+     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
+     *
+     * @return A Sticker matching the specified id
+     *
+     * @see    #retrieveSticker(StickerSnowflake)
+     */
+    @Nullable
+    default GuildSticker getStickerById(@Nonnull String id)
+    {
+        return getStickerCache().getElementById(id);
+    }
+
+    /**
+     * Gets a {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildSticker} from this guild that has the same id as the
+     * one provided.
+     * <br>If there is no {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildSticker} with an id that matches the provided
+     * one, then this returns {@code null}.
+     *
+     * <p>This requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER CacheFlag.STICKER} to be enabled!
+     *
+     * @param  id
+     *         the sticker id
+     *
+     * @return A Sticker matching the specified id
+     *
+     * @see    #retrieveSticker(StickerSnowflake)
+     */
+    @Nullable
+    default GuildSticker getStickerById(long id)
+    {
+        return getStickerCache().getElementById(id);
+    }
+
+    /**
+     * Gets all custom {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers} belonging to this {@link net.dv8tion.jda.api.entities.Guild Guild}.
+     * <br>GuildStickers are not ordered in any specific way in the returned list.
+     *
+     * <p>This copies the backing store into a list. This means every call
+     * creates a new list with O(n) complexity. It is recommended to store this into
+     * a local variable or use {@link #getStickerCache()} and use its more efficient
+     * versions of handling these values.
+     *
+     * <p>This requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER CacheFlag.STICKER} to be enabled!
+     *
+     * @return An immutable List of {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers}.
+     *
+     * @see    #retrieveStickers()
+     */
+    @Nonnull
+    default List<GuildSticker> getStickers()
+    {
+        return getStickerCache().asList();
+    }
+
+    /**
+     * Gets a list of all {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers} in this Guild that have the same
+     * name as the one provided.
+     * <br>If there are no {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers} with the provided name, then this returns an empty list.
+     *
+     * <p>This requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER CacheFlag.STICKER} to be enabled!
+     *
+     * @param  name
+     *         The name used to filter the returned {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers}. Without colons.
+     * @param  ignoreCase
+     *         Determines if the comparison ignores case when comparing. True - case insensitive.
+     *
+     * @return Possibly-empty immutable list of all Stickers that match the provided name.
+     */
+    @Nonnull
+    default List<GuildSticker> getStickersByName(@Nonnull String name, boolean ignoreCase)
+    {
+        return getStickerCache().getElementsByName(name, ignoreCase);
+    }
+
+    /**
+     * {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of
+     * all cached {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers} of this Guild.
+     * <br>This will be empty if {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER} is disabled.
+     *
+     * <p>This requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER CacheFlag.STICKER} to be enabled!
+     *
+     * @return {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
+     *
+     * @see    #retrieveStickers()
+     */
+    @Nonnull
+    SnowflakeCacheView<GuildSticker> getStickerCache();
+
     /**
      * Retrieves an immutable list of emotes together with their respective creators.
      *
@@ -1852,6 +1955,60 @@
         }, () -> retrieveEmoteById(emote.getId()));
     }
 
+    /**
+     * Retrieves all the stickers from this guild.
+     * <br>This also includes {@link GuildSticker#isAvailable() unavailable} stickers.
+     *
+     * @return {@link RestAction} - Type: List of {@link GuildSticker}
+     */
+    @Nonnull
+    @CheckReturnValue
+    RestAction<List<GuildSticker>> retrieveStickers();
+
+    /**
+     * Attempts to retrieve a {@link GuildSticker} object for this guild based on the provided snowflake reference.
+     *
+     * <p>The returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} can encounter the following Discord errors:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_STICKER UNKNOWN_STICKER}
+     *     <br>Occurs when the provided id does not refer to a sticker known by Discord.</li>
+     * </ul>
+     *
+     * @param  sticker
+     *         The reference of the requested {@link Sticker}.
+     *         <br>Can be {@link RichSticker}, {@link StickerItem}, or {@link Sticker#fromId(long)}.
+     *
+     * @throws IllegalArgumentException
+     *         If null is provided
+     *
+     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type: {@link GuildSticker}
+     *         <br>On request, gets the sticker with id matching provided id from Discord.
+     */
+    @Nonnull
+    @CheckReturnValue
+    RestAction<GuildSticker> retrieveSticker(@Nonnull StickerSnowflake sticker);
+
+    /**
+     * Modify a sticker using {@link GuildStickerManager}.
+     * <br>You can update multiple fields at once, by calling the respective setters before executing the request.
+     *
+     * <p>The returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} can encounter the following Discord errors:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_STICKER UNKNOWN_STICKER}
+     *     <br>Occurs when the provided id does not refer to a sticker known by Discord.</li>
+     * </ul>
+     *
+     * @throws IllegalArgumentException
+     *         If null is provided
+     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
+     *         If the currently logged in account does not have {@link Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} in the guild.
+     *
+     * @return {@link GuildStickerManager}
+     */
+    @Nonnull
+    @CheckReturnValue
+    GuildStickerManager editSticker(@Nonnull StickerSnowflake sticker);
+
     /**
      * Retrieves an immutable list of the currently banned {@link net.dv8tion.jda.api.entities.User Users}.
      * <br>If you wish to ban or unban a user, use either {@link #ban(UserSnowflake, int)} or
@@ -4433,6 +4590,106 @@
     @CheckReturnValue
     AuditableRestAction<Emote> createEmote(@Nonnull String name, @Nonnull Icon icon, @Nonnull Role... roles);
 
+    /**
+     * Creates a new {@link GuildSticker} in this Guild.
+     *
+     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_FILE_UPLOADED INVALID_FILE_UPLOADED}
+     *     <br>The sticker file asset is not in a supported file format</li>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
+     *     <br>The sticker could not be created due to a permission discrepancy</li>
+     * </ul>
+     *
+     * @param  name
+     *         The sticker name (2-30 characters)
+     * @param  description
+     *         The sticker description (2-100 characters, or empty)
+     * @param  file
+     *         The sticker file containing the asset (png/apng/lottie) with valid file extension (png or json)
+     * @param  tags
+     *         The tags to use for auto-suggestions (Up to 200 characters in total)
+     *
+     * @throws InsufficientPermissionException
+     *         If the currently logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} permission
+     * @throws IllegalArgumentException
+     *         <ul>
+     *             <li>If the name is not between 2 and 30 characters long</li>
+     *             <li>If the description is more than 100 characters long or exactly 1 character long</li>
+     *             <li>If the asset file is null or of an invalid format (must be PNG or LOTTIE)</li>
+     *             <li>If anything is {@code null}</li>
+     *         </ul>
+     *
+     * @return {@link AuditableRestAction} - Type: {@link GuildSticker}
+     */
+    @Nonnull
+    @CheckReturnValue
+    AuditableRestAction<GuildSticker> createSticker(@Nonnull String name, @Nonnull String description, @Nonnull FileUpload file, @Nonnull Collection<String> tags);
+
+    /**
+     * Creates a new {@link GuildSticker} in this Guild.
+     *
+     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_FILE_UPLOADED INVALID_FILE_UPLOADED}
+     *     <br>The sticker file asset is not in a supported file format</li>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
+     *     <br>The sticker could not be created due to a permission discrepancy</li>
+     * </ul>
+     *
+     * @param  name
+     *         The sticker name (2-30 characters)
+     * @param  description
+     *         The sticker description (2-100 characters, or empty)
+     * @param  file
+     *         The sticker file containing the asset (png/apng/lottie) with valid file extension (png or json)
+     * @param  tag
+     *         The sticker tag used for suggestions (emoji or tag words)
+     * @param  tags
+     *         Additional tags to use for suggestions
+     *
+     * @throws InsufficientPermissionException
+     *         If the currently logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} permission
+     * @throws IllegalArgumentException
+     *         <ul>
+     *             <li>If the name is not between 2 and 30 characters long</li>
+     *             <li>If the description is more than 100 characters long or exactly 1 character long</li>
+     *             <li>If the asset file is null or of an invalid format (must be PNG or LOTTIE)</li>
+     *             <li>If anything is {@code null}</li>
+     *         </ul>
+     *
+     * @return {@link AuditableRestAction} - Type: {@link GuildSticker}
+     */
+    @Nonnull
+    @CheckReturnValue
+    default AuditableRestAction<GuildSticker> createSticker(@Nonnull String name, @Nonnull String description, @Nonnull FileUpload file, @Nonnull String tag, @Nonnull String... tags)
+    {
+        List<String> list = new ArrayList<>(tags.length + 1);
+        list.add(tag);
+        Collections.addAll(list, tags);
+        return createSticker(name, description, file, list);
+    }
+
+    /**
+     * Deletes a sticker from the guild.
+     *
+     * <p>The returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} can encounter the following Discord errors:
+     * <ul>
+     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_STICKER UNKNOWN_STICKER}
+     *     <br>Occurs when the provided id does not refer to a sticker known by Discord.</li>
+     * </ul>
+     *
+     * @throws IllegalStateException
+     *         If null is provided
+     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
+     *         If the currently logged in account does not have {@link Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} in the guild.
+     *
+     * @return {@link AuditableRestAction}
+     */
+    @Nonnull
+    @CheckReturnValue
+    AuditableRestAction<Void> deleteSticker(@Nonnull StickerSnowflake id);
+
     /**
      * Modifies the positional order of {@link net.dv8tion.jda.api.entities.Guild#getCategories() Guild.getCategories()}
      * using a specific {@link net.dv8tion.jda.api.requests.RestAction RestAction} extension to allow moving Channels
Index: src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java b/src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java
--- a/src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/entities/GuildMessageChannel.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -1,12 +1,18 @@
 package net.dv8tion.jda.api.entities;
 
 import net.dv8tion.jda.api.Permission;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.Sticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.exceptions.MissingAccessException;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.restaction.MessageAction;
 import net.dv8tion.jda.internal.utils.Checks;
 
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nonnull;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -631,4 +637,70 @@
     {
         return clearReactionsById(Long.toUnsignedString(messageId), emote);
     }
+
+    /**
+     * Send up to 3 stickers in this channel.
+     * <br>Bots can only send {@link GuildSticker GuildStickers} from the same {@link Guild}.
+     * Bots cannot use {@link net.dv8tion.jda.api.entities.sticker.StandardSticker StandardStickers}.
+     *
+     * @param  stickers
+     *         Collection of 1-3 stickers to send
+     *
+     * @throws MissingAccessException
+     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
+     * @throws InsufficientPermissionException
+     *         <ul>
+     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
+     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
+     *         </ul>
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the list is empty or has more than 3 stickers</li>
+     *           <li>If null is provided</li>
+     *         </ul>
+     *
+     * @return {@link MessageAction}
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    MessageAction sendStickers(@Nonnull Collection<? extends StickerSnowflake> stickers);
+
+    /**
+     * Send up to 3 stickers in this channel.
+     * <br>Bots can only send {@link GuildSticker GuildStickers} from the same {@link Guild}.
+     * Bots cannot use {@link net.dv8tion.jda.api.entities.sticker.StandardSticker StandardStickers}.
+     *
+     * @param  stickers
+     *         The 1-3 stickers to send
+     *
+     * @throws MissingAccessException
+     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
+     * @throws InsufficientPermissionException
+     *         <ul>
+     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
+     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
+     *         </ul>
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the list is empty or has more than 3 stickers</li>
+     *           <li>If null is provided</li>
+     *         </ul>
+     *
+     * @return {@link MessageAction}
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    default MessageAction sendStickers(@Nonnull StickerSnowflake... stickers)
+    {
+        Checks.notEmpty(stickers, "Stickers");
+        return sendStickers(Arrays.asList(stickers));
+    }
 }
Index: src/main/java/net/dv8tion/jda/api/entities/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/Message.java b/src/main/java/net/dv8tion/jda/api/entities/Message.java
--- a/src/main/java/net/dv8tion/jda/api/entities/Message.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/entities/Message.java	(revision 1dbc26250fde6a568afd675109c437735aaf59bc)
@@ -20,8 +20,13 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.MessageBuilder;
 import net.dv8tion.jda.api.Permission;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.Sticker;
+import net.dv8tion.jda.api.entities.sticker.StickerItem;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.exceptions.HttpException;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.exceptions.MissingAccessException;
 import net.dv8tion.jda.api.interactions.InteractionType;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
@@ -169,6 +174,14 @@
      */
     int MAX_EMBED_COUNT = 10;
 
+    /**
+     * The maximum amount of {@link Sticker Stickers} that can be added to a message ({@value})
+     *
+     * @see GuildMessageChannel#sendStickers(StickerSnowflake...)
+     * @see MessageAction#setStickers(StickerSnowflake...)
+     */
+    int MAX_STICKER_COUNT = 3;
+
     /**
      * Pattern used to find instant invites in strings.
      *
@@ -716,16 +729,16 @@
     List<MessageReaction> getReactions();
 
     /**
-     * All {@link net.dv8tion.jda.api.entities.MessageSticker MessageStickers} that are in this Message.
-     * <br>The returned MessageStickers may only contain necessary information such as the sticker id, format type, name, and icon url.
+     * All {@link StickerItem StickerItems} that are in this Message.
+     * <br>The returned StickerItems may only contain necessary information such as the sticker id, format type, name, and icon url.
      *
      * @throws UnsupportedOperationException
      *         If this is a Data Message (output of {@link MessageBuilder MessageBuilder})
      *
-     * @return Immutable list of all MessageStickers in this message.
+     * @return Immutable list of all StickerItems in this message.
      */
     @Nonnull
-    List<MessageSticker> getStickers();
+    List<StickerItem> getStickers();
 
     /**
      * Defines whether or not this Message triggers TTS (Text-To-Speech).
@@ -1058,6 +1071,86 @@
     @CheckReturnValue
     MessageAction editMessage(@Nonnull Message newContent);
 
+    /**
+     * Replies and references this message.
+     * <br>This is identical to {@code message.getGuildChannel().sendStickers(stickers).reference(message)}.
+     * You can use {@link MessageAction#mentionRepliedUser(boolean) mentionRepliedUser(false)} to not mention the author of the message.
+     * <br>By default there won't be any error thrown if the referenced message does not exist.
+     * This behavior can be changed with {@link MessageAction#failOnInvalidReply(boolean)}.
+     *
+     * <p>For further info, see {@link GuildMessageChannel#sendStickers(Collection)} and {@link MessageAction#reference(Message)}.
+     *
+     * @param  stickers
+     *         The 1-3 stickers to send
+     *
+     * @throws MissingAccessException
+     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
+     * @throws InsufficientPermissionException
+     *         <ul>
+     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
+     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
+     *         </ul>
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the list is empty or has more than 3 stickers</li>
+     *           <li>If null is provided</li>
+     *         </ul>
+     * @throws IllegalStateException
+     *         If this message was not sent in a {@link Guild}
+     *
+     * @return {@link MessageAction}
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    default MessageAction replyStickers(@Nonnull Collection<? extends StickerSnowflake> stickers)
+    {
+        return getGuildChannel().sendStickers(stickers).reference(this);
+    }
+
+    /**
+     * Replies and references this message.
+     * <br>This is identical to {@code message.getGuildChannel().sendStickers(stickers).reference(message)}.
+     * You can use {@link MessageAction#mentionRepliedUser(boolean) mentionRepliedUser(false)} to not mention the author of the message.
+     * <br>By default there won't be any error thrown if the referenced message does not exist.
+     * This behavior can be changed with {@link MessageAction#failOnInvalidReply(boolean)}.
+     *
+     * <p>For further info, see {@link GuildMessageChannel#sendStickers(Collection)} and {@link MessageAction#reference(Message)}.
+     *
+     * @param  stickers
+     *         The 1-3 stickers to send
+     *
+     * @throws MissingAccessException
+     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
+     * @throws InsufficientPermissionException
+     *         <ul>
+     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
+     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
+     *         </ul>
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the list is empty or has more than 3 stickers</li>
+     *           <li>If null is provided</li>
+     *         </ul>
+     * @throws IllegalStateException
+     *         If this message was not sent in a {@link Guild}
+     *
+     * @return {@link MessageAction}
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    default MessageAction replyStickers(@Nonnull StickerSnowflake... stickers)
+    {
+        return getGuildChannel().sendStickers(stickers).reference(this);
+    }
+
     /**
      * Replies and references this message.
      * <br>This is identical to {@code message.getChannel().sendMessage(content).reference(message)}.
@@ -2616,7 +2709,7 @@
         @Nonnull
         public AttachmentProxy getProxy()
         {
-            return new AttachmentProxy(getProxyUrl());
+            return new AttachmentProxy(width > 0 && height > 0 ? proxyUrl : url);
         }
 
         /**
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/GuildSticker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/GuildSticker.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/GuildSticker.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/GuildSticker.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,128 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import net.dv8tion.jda.api.Permission;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.User;
+import net.dv8tion.jda.api.managers.GuildStickerManager;
+import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
+import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
+import org.jetbrains.annotations.Contract;
+
+import javax.annotation.CheckReturnValue;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * Custom guild sticker created by a user.
+ */
+public interface GuildSticker extends RichSticker
+{
+    @Nonnull
+    @Override
+    default Type getType()
+    {
+        return Type.GUILD;
+    }
+
+    /**
+     * Whether this sticker is currently available.
+     * <br>A sticker becomes unavailable when the boost level of a guild drops and the slot becomes unusable.
+     *
+     * @return True, if this sticker is available
+     */
+    boolean isAvailable();
+
+    /**
+     * The ID of the guild this sticker belongs to.
+     *
+     * @return The guild id
+     */
+    long getGuildIdLong();
+
+    /**
+     * The ID of the guild this sticker belongs to.
+     *
+     * @return The guild id
+     */
+    @Nonnull
+    default String getGuildId()
+    {
+        return Long.toUnsignedString(getGuildIdLong());
+    }
+
+    /**
+     * The {@link Guild} this sticker belongs to.
+     * <br>This is null if the guild is not cached on creation,
+     * Which is often the case for {@link net.dv8tion.jda.api.JDA#retrieveSticker(StickerSnowflake) JDA.retrieveSticker(...)}.
+     *
+     * @return Possibly-null guild of the sticker
+     */
+    @Nullable
+    Guild getGuild();
+
+    /**
+     * The user who created this sticker.
+     * <br>This is null if the sticker is retrieved from cache,
+     * since the owner is only provided for explicitly requested stickers.
+     *
+     * @return Possibly-null sticker owner
+     *
+     * @see    #retrieveOwner()
+     */
+    @Nullable
+    User getOwner();
+
+    /**
+     * Retrieves the sticker owner.
+     * <br>If {@link #getOwner()} is present, this will directly return the owner in a completed {@link RestAction} without making a request.
+     * The user information might be outdated, you can use {@link CacheRestAction#useCache(boolean) action.useCache(false)} to force an update.
+     *
+     * @return {@link CacheRestAction} - Type: {@link User}
+     */
+    @Nonnull
+    @CheckReturnValue
+    CacheRestAction<User> retrieveOwner();
+
+    /**
+     * Deletes this sticker from the guild.
+     *
+     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
+     *         If the currently logged in account does not have {@link Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} in the guild.
+     *
+     * @return {@link AuditableRestAction}
+     */
+    @Nonnull
+    @CheckReturnValue
+    AuditableRestAction<Void> delete();
+
+    /**
+     * Modify this sticker using {@link GuildStickerManager}.
+     * <br>You can update multiple fields at once, by calling the respective setters before executing the request.
+     *
+     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
+     *         If the currently logged in account does not have {@link Permission#MANAGE_EMOTES_AND_STICKERS MANAGE_EMOTES_AND_STICKERS} in the guild.
+     *
+     * @return {@link GuildStickerManager}
+     */
+    @Nonnull
+    @CheckReturnValue
+    @Contract("->new")
+    GuildStickerManager getManager();
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/RichSticker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/RichSticker.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/RichSticker.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/RichSticker.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import javax.annotation.Nonnull;
+import java.util.Set;
+
+/**
+ * Covers more details of stickers which are missing in messages.
+ *
+ * <p>This is used when stickers are fetched directly from the API or cache, instead of message objects.
+ */
+public interface RichSticker extends Sticker
+{
+    /**
+     * The {@link Sticker.Type Sticker Type}
+     *
+     * @return The type
+     */
+    @Nonnull
+    Sticker.Type getType();
+
+    /**
+     * Set of tags of the sticker. Tags can be used instead of the name of the sticker as aliases.
+     *
+     * @return Possibly-empty unmodifiable Set of tags of the sticker
+     */
+    @Nonnull
+    Set<String> getTags();
+
+    /**
+     * The description of the sticker, or empty String if the sticker doesn't have one.
+     *
+     * @return Possibly-empty String containing the description of the sticker
+     */
+    @Nonnull
+    String getDescription();
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/StandardSticker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/StandardSticker.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/StandardSticker.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/StandardSticker.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Standard stickers used for nitro and wave buttons on welcome messages.
+ *
+ * <p>This includes stickers from {@link StickerPack StickerPacks}, such as wumpus or doggos.
+ */
+public interface StandardSticker extends RichSticker
+{
+    @Nonnull
+    @Override
+    default Type getType()
+    {
+        return Type.STANDARD;
+    }
+
+    /**
+     * The ID of the pack the sticker is from.
+     *
+     * @return the ID of the pack the sticker is from
+     */
+    long getPackIdLong();
+
+    /**
+     * The ID of the pack the sticker is from.
+     *
+     * @return the ID of the pack the sticker is from
+     */
+    @Nonnull
+    default String getPackId()
+    {
+        return Long.toUnsignedString(getPackIdLong());
+    }
+
+    /**
+     * The sticker's sort order within its pack
+     *
+     * @return The sort order value
+     */
+    int getSortValue();
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/Sticker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/Sticker.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/Sticker.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/Sticker.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,254 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.utils.ImageProxy;
+import net.dv8tion.jda.api.utils.MiscUtil;
+import net.dv8tion.jda.internal.utils.Helpers;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Abstract representation of all sticker types.
+ *
+ * <p>This is specialized in {@link StandardSticker} and {@link GuildSticker}.
+ */
+public interface Sticker extends StickerSnowflake
+{
+    /** Template for {@link #getIconUrl()} */
+    String ICON_URL = "https://cdn.discordapp.com/stickers/%s.%s";
+
+    /**
+     * Creates a sticker snowflake instance which only wraps an ID.
+     *
+     * <p>This is primarily used for message sending purposes.
+     *
+     * @param  id
+     *         The sticker id
+     *
+     * @return A sticker snowflake instance
+     *
+     * @see    JDA#retrieveSticker(StickerSnowflake)
+     */
+    @Nonnull
+    static StickerSnowflake fromId(long id)
+    {
+        return StickerSnowflake.fromId(id);
+    }
+
+    /**
+     * Creates a sticker snowflake instance which only wraps an ID.
+     *
+     * <p>This is primarily used for message sending purposes.
+     *
+     * @param  id
+     *         The sticker id
+     *
+     * @throws IllegalArgumentException
+     *         If the provided ID is not a valid snowflake
+     *
+     * @return A sticker snowflake instance
+     *
+     * @see    JDA#retrieveSticker(StickerSnowflake)
+     */
+    @Nonnull
+    static StickerSnowflake fromId(@Nonnull String id)
+    {
+        return fromId(MiscUtil.parseSnowflake(id));
+    }
+
+    /**
+     * The format type of this sticker, used for {@link #getIconUrl()}.
+     * <br>Note that stickers can be of type {@link StickerFormat#LOTTIE LOTTIE}, which don't have simple image icons,
+     * but instead rely on client-side rendering.
+     *
+     * <p>Future stickers might have format {@link StickerFormat#UNKNOWN UNKNOWN}, which cannot be converted to a URL.
+     *
+     * @return The {@link StickerFormat} of this sticker
+     */
+    @Nonnull
+    StickerFormat getFormatType();
+
+    /**
+     * The name of the sticker.
+     *
+     * @return the name of the sticker
+     */
+    @Nonnull
+    String getName();
+
+    /**
+     * The url of the sticker image.
+     * <br>Note that {@link StickerFormat#LOTTIE LOTTIE} stickers don't provide an image, but a JSON format.
+     *
+     * @throws java.lang.IllegalStateException
+     *         If the {@link StickerFormat StickerFormat} of this sticker is {@link StickerFormat#UNKNOWN UNKNOWN}
+     *
+     * @return The image url of the sticker
+     */
+    @Nonnull
+    default String getIconUrl()
+    {
+        return Helpers.format(ICON_URL, getId(), getFormatType().getExtension());
+    }
+
+    /**
+     * Returns an {@link ImageProxy} for this sticker's image.
+     *
+     * <p>The size parameter for {@link ImageProxy} is not supported for stickers of type {@link StickerFormat#LOTTIE LOTTIE}.
+     *
+     * @throws java.lang.IllegalStateException
+     *         If the {@link StickerFormat} of this sticker is {@link StickerFormat#UNKNOWN UNKNOWN}
+     *
+     * @return Never-null {@link ImageProxy} of this sticker's image
+     *
+     * @see    #getIconUrl()
+     */
+    @Nonnull
+    default ImageProxy getIcon()
+    {
+        return new ImageProxy(getIconUrl());
+    }
+
+    /**
+     * The various formats used for stickers and the respective file extensions.
+     */
+    enum StickerFormat
+    {
+        /**
+         * The PNG format.
+         */
+        PNG(1, "png"),
+        /**
+         * The APNG format.
+         */
+        APNG(2, "png"),
+        /**
+         * The LOTTIE format.
+         * <br>Lottie isn't a standard renderable image. It is a JSON with data that can be rendered using the lottie library.
+         *
+         * @see <a href="https://airbnb.io/lottie/">Lottie website</a>
+         */
+        LOTTIE(3, "json"),
+        /**
+         * Represents any unknown or unsupported format types.
+         */
+        UNKNOWN(-1, null);
+
+        private final int id;
+        private final String extension;
+
+        StickerFormat(final int id, final String extension)
+        {
+            this.id = id;
+            this.extension = extension;
+        }
+
+        /**
+         * The file extension used for the sticker asset.
+         *
+         * @throws java.lang.IllegalStateException
+         *         If the {@link StickerFormat StickerFormat} is {@link StickerFormat#UNKNOWN UNKNOWN}
+         *
+         * @return The file extension for this format
+         */
+        @Nonnull
+        public String getExtension()
+        {
+            if (this == UNKNOWN)
+                throw new IllegalStateException("Cannot get file extension for StickerFormat.UNKNOWN");
+            return extension;
+        }
+
+        /**
+         * Resolves the specified format identifier to the StickerFormat enum constant.
+         *
+         * @param  id
+         *         The id for this format
+         *
+         * @return The representative StickerFormat or UNKNOWN if it can't be resolved
+         */
+        @Nonnull
+        public static StickerFormat fromId(int id)
+        {
+            for (StickerFormat stickerFormat : values())
+            {
+                if (stickerFormat.id == id)
+                    return stickerFormat;
+            }
+            return UNKNOWN;
+        }
+    }
+
+    /**
+     * The specific types of stickers
+     */
+    enum Type
+    {
+        /**
+         * A sticker provided by nitro sticker packs. Such as wumpus or doggo stickers.
+         * <br>These are also used for the wave buttons on welcome messages.
+         */
+        STANDARD(1),
+        /**
+         * A custom sticker created for a {@link net.dv8tion.jda.api.entities.Guild Guild}.
+         */
+        GUILD(2),
+        /**
+         * Placeholder for future stickers which are currently unsupported.
+         */
+        UNKNOWN(-1);
+
+        private final int id;
+
+        Type(int id)
+        {
+            this.id = id;
+        }
+
+        /**
+         * Gets the sticker type related to the provided id.
+         * <br>If an unknown id is provided, this returns {@link #UNKNOWN}.
+         *
+         * @param  id
+         *         The raw id for the type
+         *
+         * @return The Type that has the key provided, or {@link #UNKNOWN}
+         */
+        @Nonnull
+        public static Type fromId(int id)
+        {
+            for (Type type : values())
+            {
+                if (type.id == id)
+                    return type;
+            }
+            return UNKNOWN;
+        }
+
+        /**
+         * The Discord defined id key for this sticker type.
+         *
+         * @return the id key
+         */
+        public int getId()
+        {
+            return id;
+        }
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/StickerItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerItem.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerItem.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerItem.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+/**
+ * Stickers used primarily for message objects.
+ *
+ * <p>These types contain the minimal required information to display the sticker in the discord client.
+ */
+public interface StickerItem extends Sticker
+{
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/StickerPack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerPack.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerPack.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerPack.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,162 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import net.dv8tion.jda.api.entities.ISnowflake;
+import net.dv8tion.jda.api.utils.ImageProxy;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.List;
+
+/**
+ * A pack of {@link StandardSticker StandardStickers} used for nitro.
+ */
+public interface StickerPack extends ISnowflake
+{
+    /**
+     * Format string used for {@link #getBannerUrl()}.
+     * <br>The parameters of the format string are the {@link #getBannerId()} and the file extension (png).
+     */
+    String BANNER_URL = "https://cdn.discordapp.com/app-assets/710982414301790216/store/%s.%s";
+
+    /**
+     * The {@link StandardSticker StandardStickers} in this pack.
+     *
+     * @return Immutable List of {@link StandardSticker StandardStickers}
+     */
+    @Nonnull
+    List<StandardSticker> getStickers();
+
+    /**
+     * The name of this pack.
+     *
+     * @return Pack name
+     */
+    @Nonnull
+    String getName();
+
+    /**
+     * The description of the sticker pack
+     *
+     * @return The description
+     */
+    @Nonnull
+    String getDescription();
+
+    /**
+     * The id of the sticker shown as cover.
+     *
+     * @return The sticker id for the cover sticker, or {@code 0} if there is no cover
+     */
+    long getCoverIdLong();
+
+    /**
+     * The id of the sticker shown as cover.
+     *
+     * @return The sticker id for the cover sticker, or {@code null} if there is no cover
+     */
+    @Nullable
+    default String getCoverId()
+    {
+        long id = getCoverIdLong();
+        return id == 0 ? null : Long.toUnsignedString(id);
+    }
+
+    /**
+     * The {@link StandardSticker} shown as cover.
+     *
+     * @return The cover sticker, or {@code null} if there is no cover
+     */
+    @Nullable
+    default StandardSticker getCoverSticker()
+    {
+        long id = getCoverIdLong();
+        if (id == 0L)
+            return null;
+        return getStickers().stream().filter(s -> s.getIdLong() == id).findFirst().orElse(null);
+    }
+
+    /**
+     * The id for the pack banner.
+     * <br>This is shown when you at the top of the pack pop-out in the client.
+     *
+     * @return The banner id, or {@code 0} if there is no banner
+     */
+    long getBannerIdLong();
+
+    /**
+     * The id for the pack banner.
+     * <br>This is shown when you at the top of the pack pop-out in the client.
+     *
+     * @return The banner id, or {@code null} if there is no banner
+     */
+    @Nullable
+    default String getBannerId()
+    {
+        long id = getBannerIdLong();
+        return id == 0 ? null : Long.toUnsignedString(id);
+    }
+
+    /**
+     * The url for the pack banner.
+     * <br>This is shown when you at the top of the pack pop-out in the client.
+     *
+     * @return The banner id, or {@code null} if there is no banner
+     */
+    @Nullable
+    default String getBannerUrl()
+    {
+        String bannerId = getBannerId();
+        return bannerId == null ? null : String.format(BANNER_URL, bannerId, "png");
+    }
+
+    /**
+     * The {@link ImageProxy} for the pack banner.
+     * <br>This is shown when you at the top of the pack pop-out in the client.
+     *
+     * @return The banner proxy, or {@code null} if there is no banner
+     */
+    @Nullable
+    default ImageProxy getBanner()
+    {
+        String url = getBannerUrl();
+        return url == null ? null : new ImageProxy(url);
+    }
+
+    /**
+     * The stock-keeping unit (SKU) for this sticker pack.
+     * <br>This is used for store purchases, if there was a store to buy the pack from.
+     *
+     * @return The SKU id for this pack, or {@code 0} if there is no SKU
+     */
+    long getSkuIdLong();
+
+
+    /**
+     * The stock-keeping unit (SKU) for this sticker pack.
+     * <br>This is used for store purchases, if there was a store to buy the pack from.
+     *
+     * @return The SKU id for this pack, or {@code null} if there is no SKU
+     */
+    @Nullable
+    default String getSkuId()
+    {
+        long id = getSkuIdLong();
+        return id == 0 ? null : Long.toUnsignedString(id);
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/StickerSnowflake.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerSnowflake.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerSnowflake.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerSnowflake.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.ISnowflake;
+import net.dv8tion.jda.api.utils.MiscUtil;
+import net.dv8tion.jda.internal.entities.sticker.StickerSnowflakeImpl;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Represents an abstract sticker reference by only the sticker ID.
+ *
+ * <p>This is used for methods which only need a sticker ID to function, you cannot use this for getting names or similar.
+ * To get information about a sticker by their ID you can use {@link JDA#retrieveSticker(StickerSnowflake)} instead.
+ */
+public interface StickerSnowflake extends ISnowflake
+{
+    /**
+     * Creates a sticker snowflake instance which only wraps an ID.
+     *
+     * <p>This is primarily used for message sending purposes.
+     *
+     * @param  id
+     *         The sticker id
+     *
+     * @return A sticker snowflake instance
+     *
+     * @see    JDA#retrieveSticker(StickerSnowflake)
+     */
+    @Nonnull
+    static StickerSnowflake fromId(long id)
+    {
+        return new StickerSnowflakeImpl(id);
+    }
+
+    /**
+     * Creates a sticker snowflake instance which only wraps an ID.
+     *
+     * <p>This is primarily used for message sending purposes.
+     *
+     * @param  id
+     *         The sticker id
+     *
+     * @throws IllegalArgumentException
+     *         If the provided ID is not a valid snowflake
+     *
+     * @return A sticker snowflake instance
+     *
+     * @see    JDA#retrieveSticker(StickerSnowflake)
+     */
+    @Nonnull
+    static StickerSnowflake fromId(@Nonnull String id)
+    {
+        return fromId(MiscUtil.parseSnowflake(id));
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/entities/sticker/StickerUnion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerUnion.java b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerUnion.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/entities/sticker/StickerUnion.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.entities.sticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Represents possible {@link RichSticker} types.
+ *
+ * <p>This delegates the sticker methods for a rich sticker type,
+ * but can be converted to a concrete type using either {@link #asGuildSticker()} or {@link #asStandardSticker()}.
+ */
+public interface StickerUnion extends RichSticker
+{
+    /**
+     * Returns the underlying {@link StandardSticker} if applicable.
+     *
+     * @throws IllegalStateException
+     *         If this is not a {@link StandardSticker}
+     *
+     * @return The {@link StandardSticker}
+     */
+    @Nonnull
+    StandardSticker asStandardSticker();
+
+    /**
+     * Returns the underlying {@link GuildSticker} if applicable.
+     *
+     * @throws IllegalStateException
+     *         If this is not a {@link GuildSticker}
+     *
+     * @return The {@link GuildSticker}
+     */
+    @Nonnull
+    GuildSticker asGuildSticker();
+}
Index: src/main/java/net/dv8tion/jda/api/events/emote/EmoteAddedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/EmoteAddedEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/EmoteAddedEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/EmoteAddedEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/EmoteAddedEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -27,7 +27,7 @@
  * <h2>Requirements</h2>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  */
Index: src/main/java/net/dv8tion/jda/api/events/emote/EmoteRemovedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/EmoteRemovedEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/EmoteRemovedEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/EmoteRemovedEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/EmoteRemovedEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -27,7 +27,7 @@
  * <h2>Requirements</h2>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  */
Index: src/main/java/net/dv8tion/jda/api/events/emote/GenericEmoteEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/GenericEmoteEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/GenericEmoteEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/GenericEmoteEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/GenericEmoteEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -29,7 +29,7 @@
  * <h2>Requirements</h2>
  *
  * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  */
Index: src/main/java/net/dv8tion/jda/api/events/emote/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/package-info.java b/src/main/java/net/dv8tion/jda/api/events/emote/package-info.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/package-info.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/package-info.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -22,7 +22,7 @@
  * <h2>Requirements</h2>
  *
  * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  *
Index: src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateNameEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateNameEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateNameEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateNameEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateNameEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -29,7 +29,7 @@
  * <h2>Requirements</h2>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  *
Index: src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateRolesEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateRolesEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateRolesEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateRolesEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/update/EmoteUpdateRolesEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -31,7 +31,7 @@
  * <h2>Requirements</h2>
  *
  * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  *
Index: src/main/java/net/dv8tion/jda/api/events/emote/update/GenericEmoteUpdateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/update/GenericEmoteUpdateEvent.java b/src/main/java/net/dv8tion/jda/api/events/emote/update/GenericEmoteUpdateEvent.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/update/GenericEmoteUpdateEvent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/update/GenericEmoteUpdateEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -30,7 +30,7 @@
  * <h2>Requirements</h2>
  *
  * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  */
Index: src/main/java/net/dv8tion/jda/api/events/emote/update/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/emote/update/package-info.java b/src/main/java/net/dv8tion/jda/api/events/emote/update/package-info.java
--- a/src/main/java/net/dv8tion/jda/api/events/emote/update/package-info.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/events/emote/update/package-info.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -20,7 +20,7 @@
  * <h2>Requirements</h2>
  *
  * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#EMOTE EMOTE} CacheFlag to be enabled, which requires
- * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent.
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
  *
  * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
  */
Index: src/main/java/net/dv8tion/jda/api/events/sticker/GenericGuildStickerEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/GenericGuildStickerEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/GenericGuildStickerEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/GenericGuildStickerEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,70 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.events.Event;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that an {@link GuildSticker} was created/removed/updated.
+ *
+ * <p><b>Requirements</b>
+ *
+ * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+public abstract class GenericGuildStickerEvent extends Event
+{
+    protected final Guild guild;
+    protected final GuildSticker sticker;
+
+    public GenericGuildStickerEvent(@Nonnull JDA api, long responseNumber,
+                                    @Nonnull Guild guild, @Nonnull GuildSticker sticker)
+    {
+        super(api, responseNumber);
+        this.guild = guild;
+        this.sticker = sticker;
+    }
+
+    /**
+     * The relevant {@link GuildSticker} for this event
+     *
+     * @return The sticker
+     */
+    @Nonnull
+    public GuildSticker getSticker()
+    {
+        return sticker;
+    }
+
+    /**
+     * The {@link Guild} this sticker belongs to
+     *
+     * @return The relevant guild
+     */
+    @Nonnull
+    public Guild getGuild()
+    {
+        return guild;
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerAddedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerAddedEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerAddedEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerAddedEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that a new {@link GuildSticker} was added to a {@link Guild}.
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+public class GuildStickerAddedEvent extends GenericGuildStickerEvent
+{
+    public GuildStickerAddedEvent(@Nonnull JDA api, long responseNumber,
+                                  @Nonnull Guild guild, @Nonnull GuildSticker sticker)
+    {
+        super(api, responseNumber, guild, sticker);
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerRemovedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerRemovedEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerRemovedEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/GuildStickerRemovedEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that a new {@link GuildSticker} was removed from a {@link Guild}.
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+public class GuildStickerRemovedEvent extends GenericGuildStickerEvent
+{
+    public GuildStickerRemovedEvent(@Nonnull JDA api, long responseNumber,
+                                    @Nonnull Guild guild, @Nonnull GuildSticker sticker)
+    {
+        super(api, responseNumber, guild, sticker);
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/package-info.java b/src/main/java/net/dv8tion/jda/api/events/sticker/package-info.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/package-info.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Events that track {@link net.dv8tion.jda.api.events.sticker.GuildStickerAddedEvent added stickers}
+ * and {@link net.dv8tion.jda.api.events.sticker.GuildStickerRemovedEvent removed stickers}.
+ *
+ * <h2>Requirements</h2>
+ *
+ * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+package net.dv8tion.jda.api.events.sticker;
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/GenericGuildStickerUpdateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/GenericGuildStickerUpdateEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GenericGuildStickerUpdateEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GenericGuildStickerUpdateEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker.update;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.events.UpdateEvent;
+import net.dv8tion.jda.api.events.sticker.GenericGuildStickerEvent;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/**
+ * Indicates that an {@link GuildSticker} was updated.
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+public abstract class GenericGuildStickerUpdateEvent<T> extends GenericGuildStickerEvent implements UpdateEvent<GuildSticker, T>
+{
+    protected final String identifier;
+    protected final T previous;
+    protected final T next;
+
+    public GenericGuildStickerUpdateEvent(@Nonnull JDA api, long responseNumber,
+                                          @Nonnull Guild guild, @Nonnull GuildSticker sticker,
+                                          @Nonnull String identifier, T oldValue, T newValue)
+    {
+        super(api, responseNumber, guild, sticker);
+        this.identifier = identifier;
+        this.previous = oldValue;
+        this.next = newValue;
+    }
+
+    @Nonnull
+    @Override
+    public String getPropertyIdentifier()
+    {
+        return identifier;
+    }
+
+    @Nonnull
+    @Override
+    public GuildSticker getEntity()
+    {
+        return getSticker();
+    }
+
+    @Nullable
+    @Override
+    public T getOldValue()
+    {
+        return previous;
+    }
+
+    @Nullable
+    @Override
+    public T getNewValue()
+    {
+        return next;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "GuildStickerUpdate[" + getPropertyIdentifier() + "](" + getOldValue() + "->" + getNewValue() + ')';
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateAvailableEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateAvailableEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateAvailableEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateAvailableEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker.update;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that the availability of a {@link GuildSticker} changed.
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ *
+ * <p>Identifier: {@code available}
+ */
+public class GuildStickerUpdateAvailableEvent extends GenericGuildStickerUpdateEvent<Boolean>
+{
+    public static final String IDENTIFIER = "available";
+
+    public GuildStickerUpdateAvailableEvent(@Nonnull JDA api, long responseNumber,
+                                            @Nonnull Guild guild, @Nonnull GuildSticker sticker, boolean oldValue)
+    {
+        super(api, responseNumber, guild, sticker, IDENTIFIER, oldValue, sticker.isAvailable());
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public Boolean getOldValue()
+    {
+        return super.getOldValue();
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public Boolean getNewValue()
+    {
+        return super.getNewValue();
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateDescriptionEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateDescriptionEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateDescriptionEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateDescriptionEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker.update;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that the description of a {@link GuildSticker} changed.
+ *
+ * <p>Can be used to retrieve the old description
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ *
+ * <p>Identifier: {@code description}
+ */
+public class GuildStickerUpdateDescriptionEvent extends GenericGuildStickerUpdateEvent<String>
+{
+    public static final String IDENTIFIER = "description";
+
+    public GuildStickerUpdateDescriptionEvent(@Nonnull JDA api, long responseNumber,
+                                       @Nonnull Guild guild, @Nonnull GuildSticker sticker, @Nonnull String oldValue)
+    {
+        super(api, responseNumber, guild, sticker, IDENTIFIER, oldValue, sticker.getDescription());
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public String getOldValue()
+    {
+        return super.getOldValue();
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public String getNewValue()
+    {
+        return super.getNewValue();
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateNameEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateNameEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateNameEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateNameEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker.update;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+
+/**
+ * Indicates that the name of a {@link GuildSticker} changed.
+ *
+ * <p>Can be used to retrieve the old name
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ *
+ * <p>Identifier: {@code name}
+ */
+public class GuildStickerUpdateNameEvent extends GenericGuildStickerUpdateEvent<String>
+{
+    public static final String IDENTIFIER = "name";
+
+    public GuildStickerUpdateNameEvent(@Nonnull JDA api, long responseNumber,
+                                       @Nonnull Guild guild, @Nonnull GuildSticker sticker, @Nonnull String oldValue)
+    {
+        super(api, responseNumber, guild, sticker, IDENTIFIER, oldValue, sticker.getName());
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public String getOldValue()
+    {
+        return super.getOldValue();
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public String getNewValue()
+    {
+        return super.getNewValue();
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateTagsEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateTagsEvent.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateTagsEvent.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/GuildStickerUpdateTagsEvent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.events.sticker.update;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+
+import javax.annotation.Nonnull;
+import java.util.Set;
+
+/**
+ * Indicates that the tags of a {@link GuildSticker} changed.
+ *
+ * <p>Can be used to retrieve the old tags
+ *
+ * <p><b>Requirements</b><br>
+ *
+ * <p>This event requires the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ *
+ * <p>Identifier: {@code tags}
+ */
+public class GuildStickerUpdateTagsEvent extends GenericGuildStickerUpdateEvent<Set<String>>
+{
+    public static final String IDENTIFIER = "tags";
+
+    public GuildStickerUpdateTagsEvent(@Nonnull JDA api, long responseNumber,
+                                       @Nonnull Guild guild, @Nonnull GuildSticker sticker, @Nonnull Set<String> oldValue)
+    {
+        super(api, responseNumber, guild, sticker, IDENTIFIER, oldValue, sticker.getTags());
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public Set<String> getOldValue()
+    {
+        return super.getOldValue();
+    }
+
+    @Nonnull
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public Set<String> getNewValue()
+    {
+        return super.getNewValue();
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/events/sticker/update/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/events/sticker/update/package-info.java b/src/main/java/net/dv8tion/jda/api/events/sticker/update/package-info.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/events/sticker/update/package-info.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Events that track updates for existing {@link net.dv8tion.jda.api.entities.sticker.GuildSticker GuildStickers}.
+ *
+ * <h2>Requirements</h2>
+ *
+ * <p>These events require the {@link net.dv8tion.jda.api.utils.cache.CacheFlag#STICKER STICKER} CacheFlag to be enabled, which requires
+ * the {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent.
+ *
+ * <br>{@link net.dv8tion.jda.api.JDABuilder#createLight(String) createLight(String)} disables that CacheFlag by default!
+ */
+package net.dv8tion.jda.api.events.sticker.update;
Index: src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java b/src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java
--- a/src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/hooks/ListenerAdapter.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -59,6 +59,10 @@
 import net.dv8tion.jda.api.events.stage.update.GenericStageInstanceUpdateEvent;
 import net.dv8tion.jda.api.events.stage.update.StageInstanceUpdatePrivacyLevelEvent;
 import net.dv8tion.jda.api.events.stage.update.StageInstanceUpdateTopicEvent;
+import net.dv8tion.jda.api.events.sticker.GenericGuildStickerEvent;
+import net.dv8tion.jda.api.events.sticker.GuildStickerAddedEvent;
+import net.dv8tion.jda.api.events.sticker.GuildStickerRemovedEvent;
+import net.dv8tion.jda.api.events.sticker.update.*;
 import net.dv8tion.jda.api.events.thread.GenericThreadEvent;
 import net.dv8tion.jda.api.events.thread.ThreadHiddenEvent;
 import net.dv8tion.jda.api.events.thread.ThreadRevealedEvent;
@@ -292,6 +296,16 @@
     public void onEmoteUpdateName(@Nonnull EmoteUpdateNameEvent event) {}
     public void onEmoteUpdateRoles(@Nonnull EmoteUpdateRolesEvent event) {}
 
+    //Sticker Events
+    public void onGuildStickerAdded(@Nonnull GuildStickerAddedEvent event) {}
+    public void onGuildStickerRemoved(@Nonnull GuildStickerRemovedEvent event) {}
+
+    //Sticker Update Events
+    public void onGuildStickerUpdateName(@Nonnull GuildStickerUpdateNameEvent event) {}
+    public void onGuildStickerUpdateTags(@Nonnull GuildStickerUpdateTagsEvent event) {}
+    public void onGuildStickerUpdateDescription(@Nonnull GuildStickerUpdateDescriptionEvent event) {}
+    public void onGuildStickerUpdateAvailable(@Nonnull GuildStickerUpdateAvailableEvent event) {}
+
     // Debug Events
     public void onHttpRequest(@Nonnull HttpRequestEvent event) {}
 
@@ -322,6 +336,8 @@
     public void onGenericRoleUpdate(@Nonnull GenericRoleUpdateEvent event) {}
     public void onGenericEmote(@Nonnull GenericEmoteEvent event) {}
     public void onGenericEmoteUpdate(@Nonnull GenericEmoteUpdateEvent event) {}
+    public void onGenericGuildSticker(@Nonnull GenericGuildStickerEvent event) {}
+    public void onGenericGuildStickerUpdate(@Nonnull GenericGuildStickerUpdateEvent event) {}
     public void onGenericPermissionOverride(@Nonnull GenericPermissionOverrideEvent event) {}
 
     private static final MethodHandles.Lookup lookup = MethodHandles.lookup();
Index: src/main/java/net/dv8tion/jda/api/managers/GuildStickerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/managers/GuildStickerManager.java b/src/main/java/net/dv8tion/jda/api/managers/GuildStickerManager.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/managers/GuildStickerManager.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,218 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.managers;
+
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
+import net.dv8tion.jda.internal.utils.Checks;
+
+import javax.annotation.CheckReturnValue;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.Arrays;
+import java.util.Collection;
+
+/**
+ * Manager providing functionality to update one or more fields for {@link GuildSticker}.
+ *
+ * <p><b>Example</b>
+ * <pre>{@code
+ * manager.setName("catDance")
+ *        .setDescription("Cat dancing")
+ *        .queue();
+ * manager.reset(GuildStickerManager.NAME | GuildStickerManager.TAGS)
+ *        .setName("dogDance")
+ *        .setTags("dancing", "dog")
+ *        .queue();
+ * }</pre>
+ *
+ * @see GuildSticker#getManager()
+ * @see Guild#editSticker(StickerSnowflake)
+ */
+public interface GuildStickerManager extends Manager<GuildStickerManager>
+{
+    /** Used to reset name field */
+    long NAME = 1;
+    /** Used to reset description field */
+    long DESCRIPTION = 1 << 1;
+    /** Used to reset tags field */
+    long TAGS = 1 << 2;
+
+    /**
+     * Resets the fields specified by the provided bit-flag pattern.
+     * You can specify a combination by using a bitwise OR concat of the flag constants.
+     * <br>Example: {@code manager.reset(GuildStickerManager.NAME | GuildStickerManager.TAGS);}
+     *
+     * <p><b>Flag Constants:</b>
+     * <ul>
+     *     <li>{@link #NAME}</li>
+     *     <li>{@link #DESCRIPTION}</li>
+     *     <li>{@link #TAGS}</li>
+     * </ul>
+     *
+     * @param  fields
+     *         Integer value containing the flags to reset.
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @Override
+    GuildStickerManager reset(long fields);
+
+    /**
+     * Resets the fields specified by the provided bit-flag pattern.
+     * You can specify a combination by using a bitwise OR concat of the flag constants.
+     * <br>Example: {@code manager.reset(GuildStickerManager.NAME, GuildStickerManager.TAGS);}
+     *
+     * <p><b>Flag Constants:</b>
+     * <ul>
+     *     <li>{@link #NAME}</li>
+     *     <li>{@link #DESCRIPTION}</li>
+     *     <li>{@link #TAGS}</li>
+     * </ul>
+     *
+     * @param  fields
+     *         Integer value containing the flags to reset.
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @Override
+    GuildStickerManager reset(long... fields);
+
+    /**
+     * The {@link Guild} this Manager's {@link GuildSticker} is in.
+     *
+     * <p>This is null if {@link GuildSticker#getManager()} is used on a sticker with an uncached guild.
+     *
+     * @return The {@link Guild Guild}, or null if not present.
+     *
+     * @see    #getGuildId()
+     */
+    @Nullable
+    Guild getGuild();
+
+    /**
+     * The ID of the guild this sticker belongs to.
+     *
+     * @return The guild id
+     */
+    long getGuildIdLong();
+
+    /**
+     * The ID of the guild this sticker belongs to.
+     *
+     * @return The guild id
+     */
+    @Nonnull
+    default String getGuildId()
+    {
+        return Long.toUnsignedString(getGuildIdLong());
+    }
+
+    /**
+     * Sets the <b><u>name</u></b> of the sticker.
+     *
+     * <p>A sticker name <b>must</b> be between 2-30 characters long!
+     *
+     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
+     *
+     * @param  name
+     *         The new name for the sticker (2-30 characters)
+     *
+     * @throws IllegalArgumentException
+     *         If the provided name is {@code null} or not between 2-30 characters long
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @CheckReturnValue
+    GuildStickerManager setName(@Nonnull String name);
+
+
+    /**
+     * Sets the <b><u>description</u></b> of the sticker.
+     *
+     * <p>A sticker description <b>must</b> be between 2-100 characters long!
+     *
+     * @param  description
+     *         The new description for the sticker (2-100 characters)
+     *
+     * @throws IllegalArgumentException
+     *         If the provided description is {@code null} or not between 2-100 characters long
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @CheckReturnValue
+    GuildStickerManager setDescription(@Nonnull String description);
+
+    /**
+     * Sets the <b><u>tags</u></b> of the sticker.
+     * <br>These are used for auto-complete when sending a message in the client, and for the sticker picker menu.
+     *
+     * <p>The combined list of sticker tags <b>must</b> at most be 200 characters long!
+     *
+     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
+     *
+     * @param  tags
+     *         The new tags for the sticker (up to 200 characters)
+     *
+     * @throws IllegalArgumentException
+     *         <ul>
+     *             <li>If {@code tags} is {@code null}</li>
+     *             <li>If {@code tags} is empty</li>
+     *             <li>If {@code tags} contains {@code null} or empty strings</li>
+     *             <li>If the concatenated tags are more than 200 characters long (including commas between tags)</li>
+     *         </ul>
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @CheckReturnValue
+    GuildStickerManager setTags(@Nonnull Collection<String> tags);
+
+    /**
+     * Sets the <b><u>tags</u></b> of the sticker.
+     * <br>These are used for auto-complete when sending a message in the client, and for the sticker picker menu.
+     *
+     * <p>The combined list of sticker tags <b>must</b> at most be 200 characters long!
+     *
+     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
+     *
+     * @param  tags
+     *         The new tags for the sticker (up to 200 characters)
+     *
+     * @throws IllegalArgumentException
+     *         <ul>
+     *             <li>If {@code tags} is {@code null}</li>
+     *             <li>If {@code tags} is empty</li>
+     *             <li>If {@code tags} contains {@code null} or empty strings</li>
+     *             <li>If the concatenated tags are more than 200 characters long (including commas between tags)</li>
+     *         </ul>
+     *
+     * @return GuildStickerManager for chaining convenience
+     */
+    @Nonnull
+    @CheckReturnValue
+    default GuildStickerManager setTags(@Nonnull String... tags)
+    {
+        Checks.noneNull(tags, "Tags");
+        return setTags(Arrays.asList(tags));
+    }
+}
Index: src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java b/src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java
--- a/src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/requests/ErrorResponse.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -153,6 +153,7 @@
     CANNOT_SELF_REDEEM_GIFT(                  50054, "Cannot self-redeem this gift"),
     PAYMENT_SOURCE_REQUIRED(                  50070, "Payment source required to redeem gift"),
     CANNOT_DELETE_CHANNEL_COMMUNITY(          50074, "Cannot delete a channel required for Community guilds"),
+    CANNOT_EDIT_STICKER_MESSAGE(              50080, "Cannot edit a message with stickers"),
     INVALID_STICKER_SENT(                     50081, "Invalid Sticker Sent"),
     ILLEGAL_OPERATION_ARCHIVED_THREAD(        50083, "Tried to perform an operation on an archived thread, such as editing a message or adding a user to the thread"),
     INVALID_THREAD_NOTIFICATION_SETTINGS(     50084, "Invalid thread notification settings"),
Index: src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java b/src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java
--- a/src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/requests/GatewayIntent.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -89,9 +89,9 @@
      */
     GUILD_BANS(2),
     /**
-     * Emote add/update/delete events.
+     * Emote and sticker add/update/delete events.
      */
-    GUILD_EMOJIS(3),
+    GUILD_EMOJIS_AND_STICKERS(3),
 //    /**
 //     * Integration events. (unused)
 //     */
@@ -352,7 +352,7 @@
             else if (GuildBanEvent.class.isAssignableFrom(event) || GuildUnbanEvent.class.isAssignableFrom(event))
                 intents.add(GUILD_BANS);
             else if (GenericEmoteEvent.class.isAssignableFrom(event))
-                intents.add(GUILD_EMOJIS);
+                intents.add(GUILD_EMOJIS_AND_STICKERS);
             else if (GenericGuildInviteEvent.class.isAssignableFrom(event))
                 intents.add(GUILD_INVITES);
             else if (GenericGuildVoiceEvent.class.isAssignableFrom(event))
Index: src/main/java/net/dv8tion/jda/api/requests/restaction/CacheRestAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/requests/restaction/CacheRestAction.java b/src/main/java/net/dv8tion/jda/api/requests/restaction/CacheRestAction.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/api/requests/restaction/CacheRestAction.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.api.requests.restaction;
+
+import net.dv8tion.jda.api.requests.RestAction;
+
+import javax.annotation.CheckReturnValue;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.concurrent.TimeUnit;
+import java.util.function.BooleanSupplier;
+
+/**
+ * Requests which can use cached values instead of making a request to Discord.
+ *
+ * @param <T>
+ *        The entity type
+ */
+public interface CacheRestAction<T> extends RestAction<T>
+{
+    @Nonnull
+    @Override
+    CacheRestAction<T> setCheck(@Nullable BooleanSupplier checks);
+
+    @Nonnull
+    @Override
+    default CacheRestAction<T> addCheck(@Nonnull BooleanSupplier checks)
+    {
+        return (CacheRestAction<T>) RestAction.super.addCheck(checks);
+    }
+
+    @Nonnull
+    @Override
+    default CacheRestAction<T> timeout(long timeout, @Nonnull TimeUnit unit)
+    {
+        return (CacheRestAction<T>) RestAction.super.timeout(timeout, unit);
+    }
+
+    @Nonnull
+    @Override
+    default CacheRestAction<T> deadline(long timestamp)
+    {
+        return (CacheRestAction<T>) RestAction.super.deadline(timestamp);
+    }
+
+    /**
+     * Sets whether this request should rely on cached entities, or always retrieve a new one.
+     *
+     * @param  useCache
+     *         True if the cache should be used when available, even if the entity might be outdated.
+     *         False, to always request a new instance from the API.
+     *
+     * @return This RestAction instance
+     */
+    @Nonnull
+    @CheckReturnValue
+    CacheRestAction<T> useCache(boolean useCache);
+}
Index: src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java b/src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java
--- a/src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/requests/restaction/MessageAction.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -20,6 +20,9 @@
 import net.dv8tion.jda.api.entities.Message;
 import net.dv8tion.jda.api.entities.MessageChannel;
 import net.dv8tion.jda.api.entities.MessageEmbed;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.Sticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.interactions.components.ActionComponent;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.ItemComponent;
@@ -894,6 +897,61 @@
         return setActionRows(ActionRow.of(components));
     }
 
+    /**
+     * Set the stickers to send alongside this message.
+     * <br>This is not supported for message edits.
+     *
+     * @param  stickers
+     *         The stickers to send, or null to not send any stickers
+     *
+     * @throws IllegalStateException
+     *         If this request is a message edit request
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the collection has more than {@value Message#MAX_STICKER_COUNT} stickers</li>
+     *           <li>If a collection with null entries is provided</li>
+     *         </ul>
+     *
+     * @return Updated MessageAction for chaining convenience
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    MessageAction setStickers(@Nullable Collection<? extends StickerSnowflake> stickers);
+
+    /**
+     * Set the stickers to send alongside this message.
+     * <br>This is not supported for message edits.
+     *
+     * @param  stickers
+     *         The stickers to send, or null to not send any stickers
+     *
+     * @throws IllegalStateException
+     *         If this request is a message edit request
+     * @throws IllegalArgumentException
+     *         <ul>
+     *           <li>If any of the provided stickers is a {@link GuildSticker},
+     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
+     *           <li>If the collection has more than {@value Message#MAX_STICKER_COUNT} stickers</li>
+     *           <li>If a collection with null entries is provided</li>
+     *         </ul>
+     *
+     * @return Updated MessageAction for chaining convenience
+     *
+     * @see    Sticker#fromId(long)
+     */
+    @Nonnull
+    @CheckReturnValue
+    default MessageAction setStickers(@Nullable StickerSnowflake... stickers)
+    {
+        if (stickers != null)
+            Checks.noneNull(stickers, "Sticker");
+        return setStickers(stickers == null ? null : Arrays.asList(stickers));
+    }
+
 
     /**
      * Whether all fields should be considered when editing a message
Index: src/main/java/net/dv8tion/jda/api/utils/AttachedFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/utils/AttachedFile.java b/src/main/java/net/dv8tion/jda/api/utils/AttachedFile.java
--- a/src/main/java/net/dv8tion/jda/api/utils/AttachedFile.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/utils/AttachedFile.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -234,25 +234,6 @@
         return AttachmentUpdate.fromAttachment(attachment);
     }
 
-    /**
-     * Marks this attachment as used and throws if it has already been used.
-     * <br>This does nothing on {@link AttachmentUpdate}.
-     *
-     * @throws IllegalStateException
-     *         If this attachment has already been used
-     */
-    void claim();
-
-    /**
-     * Whether this attached file has already been used.
-     * <br>When this is true, {@link #claim()} will throw an {@link IllegalStateException}.
-     *
-     * <p>Resources cannot be read multiple times, so repeated use of this instance is not allowed.
-     *
-     * @return True if this attachment has already been used
-     */
-    boolean isClaimed();
-
     /**
      * Used internally to build the multipart request.
      *
Index: src/main/java/net/dv8tion/jda/api/utils/AttachmentUpdate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/utils/AttachmentUpdate.java b/src/main/java/net/dv8tion/jda/api/utils/AttachmentUpdate.java
--- a/src/main/java/net/dv8tion/jda/api/utils/AttachmentUpdate.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/utils/AttachmentUpdate.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -106,15 +106,6 @@
         return id;
     }
 
-    @Override
-    public void claim() {}
-
-    @Override
-    public boolean isClaimed()
-    {
-        return false;
-    }
-
     @Override
     public void addPart(@Nonnull MultipartBody.Builder builder, int index) {}
 
Index: src/main/java/net/dv8tion/jda/api/utils/FileUpload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/utils/FileUpload.java b/src/main/java/net/dv8tion/jda/api/utils/FileUpload.java
--- a/src/main/java/net/dv8tion/jda/api/utils/FileUpload.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/utils/FileUpload.java	(revision 4f7b413a9c7b96a541eaf269dea95290f529f503)
@@ -18,9 +18,12 @@
 
 import net.dv8tion.jda.api.utils.data.DataObject;
 import net.dv8tion.jda.internal.requests.Requester;
+import net.dv8tion.jda.internal.utils.BufferedRequestBody;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.IOUtil;
+import okhttp3.MediaType;
 import okhttp3.MultipartBody;
+import okhttp3.RequestBody;
 
 import javax.annotation.Nonnull;
 import java.io.*;
@@ -39,7 +42,7 @@
 {
     private final InputStream resource;
     private final String name;
-    private boolean claimed = false;
+    private BufferedRequestBody body;
 
     protected FileUpload(InputStream resource, String name)
     {
@@ -253,24 +256,34 @@
         return resource;
     }
 
-    @Override
-    public synchronized void claim()
+    /**
+     * Creates a re-usable instance of {@link RequestBody} with the specified content-type.
+     *
+     * <p>This body will automatically close the {@link #getData() resource} when the request is done.
+     * However, since the body buffers the data, it can be used multiple times regardless.
+     *
+     * @param  type
+     *         The content-type to use for the body (e.g. {@code "application/octet-stream"})
+     *
+     * @throws IllegalArgumentException
+     *         If the content-type is null
+     *
+     * @return {@link RequestBody}
+     */
+    @Nonnull
+    public synchronized RequestBody getRequestBody(@Nonnull MediaType type)
     {
-        if (claimed)
-            throw new IllegalStateException("Instances of FileUpload can only be used once. Create a new instance with a new data source for each use.");
-        claimed = true;
-    }
-
-    @Override
-    public synchronized boolean isClaimed()
-    {
-        return claimed;
+        Checks.notNull(type, "Type");
+        if (body != null) // This allows FileUpload to be used more than once!
+            return body.withType(type);
+        return body = IOUtil.createRequestBody(type, resource);
     }
 
     @Override
-    public void addPart(@Nonnull MultipartBody.Builder builder, int index)
+    @SuppressWarnings("ConstantConditions")
+    public synchronized void addPart(@Nonnull MultipartBody.Builder builder, int index)
     {
-        builder.addFormDataPart("files[" + index + "]", name, IOUtil.createRequestBody(Requester.MEDIA_TYPE_OCTET, resource));
+        builder.addFormDataPart("files[" + index + "]", name, getRequestBody(Requester.MEDIA_TYPE_OCTET));
     }
 
     @Nonnull
@@ -293,7 +306,8 @@
     @SuppressWarnings("deprecation")
     protected void finalize()
     {
-        IOUtil.silentClose(resource);
+        if (body == null) // Only close if the resource was never used
+            IOUtil.silentClose(resource);
     }
 
     @Override
Index: src/main/java/net/dv8tion/jda/api/utils/cache/CacheFlag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/utils/cache/CacheFlag.java b/src/main/java/net/dv8tion/jda/api/utils/cache/CacheFlag.java
--- a/src/main/java/net/dv8tion/jda/api/utils/cache/CacheFlag.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/api/utils/cache/CacheFlag.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -47,9 +47,15 @@
     /**
      * Enables cache for {@link Guild#getEmoteCache()}
      *
-     * <p>Requires {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS GUILD_EMOJIS} intent to be enabled.
+     * <p>Requires {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent to be enabled.
      */
-    EMOTE(GatewayIntent.GUILD_EMOJIS),
+    EMOTE(GatewayIntent.GUILD_EMOJIS_AND_STICKERS),
+    /**
+     * Enables cache for {@link Guild#getStickerCache()}
+     *
+     * <p>Requires {@link net.dv8tion.jda.api.requests.GatewayIntent#GUILD_EMOJIS_AND_STICKERS GUILD_EMOJIS_AND_STICKERS} intent to be enabled.
+     */
+    STICKER(GatewayIntent.GUILD_EMOJIS_AND_STICKERS),
     /**
      * Enables cache for {@link Member#getOnlineStatus(net.dv8tion.jda.api.entities.ClientType) Member.getOnlineStatus(ClientType)}
      *
Index: src/main/java/net/dv8tion/jda/internal/JDAImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/JDAImpl.java b/src/main/java/net/dv8tion/jda/internal/JDAImpl.java
--- a/src/main/java/net/dv8tion/jda/internal/JDAImpl.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/JDAImpl.java	(revision 215d275d1de3bc35c40c5949c239f30decf155b9)
@@ -26,10 +26,14 @@
 import net.dv8tion.jda.api.audio.factory.IAudioSendFactory;
 import net.dv8tion.jda.api.audio.hooks.ConnectionStatus;
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.StickerPack;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
+import net.dv8tion.jda.api.entities.sticker.StickerUnion;
 import net.dv8tion.jda.api.events.GatewayPingEvent;
 import net.dv8tion.jda.api.events.GenericEvent;
 import net.dv8tion.jda.api.events.StatusChangeEvent;
 import net.dv8tion.jda.api.exceptions.AccountTypeException;
+import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.exceptions.RateLimitedException;
 import net.dv8tion.jda.api.hooks.IEventManager;
 import net.dv8tion.jda.api.hooks.InterfacedEventManager;
@@ -218,8 +222,7 @@
         try
         {
             return member.getUser().equals(getSelfUser()) // always cache self
-                    || chunkGuild(member.getGuild().getIdLong())  // always cache if chunking
-                    || memberCachePolicy.cacheMember(member); // ask policy, should we cache?
+                || memberCachePolicy.cacheMember(member); // ask policy, should we cache?
         }
         catch (Exception e)
         {
@@ -620,6 +623,44 @@
         return CacheView.allSnowflakes(() -> guildCache.stream().map(Guild::getEmoteCache));
     }
 
+    @Nonnull
+    @Override
+    public RestAction<StickerUnion> retrieveSticker(@Nonnull StickerSnowflake sticker)
+    {
+        Checks.notNull(sticker, "Sticker");
+        Route.CompiledRoute route = Route.Stickers.GET_STICKER.compile(sticker.getId());
+        return new RestActionImpl<>(this, route,
+            (response, request) -> entityBuilder.createRichSticker(response.getObject())
+        );
+    }
+
+    @Nonnull
+    @Override
+    public RestAction<List<StickerPack>> retrieveNitroStickerPacks()
+    {
+        Route.CompiledRoute route = Route.Stickers.LIST_PACKS.compile();
+        return new RestActionImpl<>(this, route, (response, request) ->
+        {
+            DataArray array = response.getObject().getArray("sticker_packs");
+            List<StickerPack> packs = new ArrayList<>(array.length());
+            for (int i = 0; i < array.length(); i++)
+            {
+                DataObject object = null;
+                try
+                {
+                    object = array.getObject(i);
+                    StickerPack pack = entityBuilder.createStickerPack(object);
+                    packs.add(pack);
+                }
+                catch (ParsingException ex)
+                {
+                    EntityBuilder.LOG.error("Failed to parse sticker pack. JSON: {}", object);
+                }
+            }
+            return Collections.unmodifiableList(packs);
+        });
+    }
+
     @Nonnull
     @Override
     public SnowflakeCacheView<Category> getCategoryCache()
Index: src/main/java/net/dv8tion/jda/internal/entities/AbstractMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/AbstractMessage.java b/src/main/java/net/dv8tion/jda/internal/entities/AbstractMessage.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/AbstractMessage.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/AbstractMessage.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -18,6 +18,7 @@
 
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.StickerItem;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.RestAction;
@@ -293,7 +294,7 @@
 
     @Nonnull
     @Override
-    public List<MessageSticker> getStickers()
+    public List<StickerItem> getStickers()
     {
         unsupported();
         return null;
Index: src/main/java/net/dv8tion/jda/internal/entities/DataMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/DataMessage.java b/src/main/java/net/dv8tion/jda/internal/entities/DataMessage.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/DataMessage.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/DataMessage.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.entities.MessageActivity;
 import net.dv8tion.jda.api.entities.MessageEmbed;
 import net.dv8tion.jda.api.entities.MessageType;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.interactions.components.ActionRow;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 
@@ -34,9 +35,11 @@
     private final String[] mentionedUsers;
     private final LayoutComponent[] components;
     private Collection<? extends MessageEmbed> embeds;
+    private Collection<? extends StickerSnowflake> stickers;
 
     public DataMessage(boolean tts, String content, String nonce, Collection<? extends MessageEmbed> embeds,
-                       EnumSet<MentionType> allowedMentions, String[] mentionedUsers, String[] mentionedRoles, LayoutComponent[] components)
+                       EnumSet<MentionType> allowedMentions, String[] mentionedUsers, String[] mentionedRoles,
+                       LayoutComponent[] components, Collection<? extends StickerSnowflake> stickers)
     {
         super(content, nonce, tts);
         this.embeds = embeds;
@@ -44,11 +47,12 @@
         this.mentionedUsers = mentionedUsers;
         this.mentionedRoles = mentionedRoles;
         this.components = components;
+        this.stickers = stickers;
     }
 
     public DataMessage(boolean tts, String content, String nonce, Collection<? extends MessageEmbed> embeds)
     {
-        this(tts, content, nonce, embeds, null, new String[0], new String[0], new LayoutComponent[0]);
+        this(tts, content, nonce, embeds, null, new String[0], new String[0], new LayoutComponent[0], Collections.emptyList());
     }
 
     public EnumSet<MentionType> getAllowedMentions()
@@ -123,6 +127,12 @@
                     .collect(Collectors.toList());
     }
 
+    @Nonnull
+    public Collection<? extends StickerSnowflake> getStickerSnowflakes()
+    {
+        return stickers;
+    }
+
     // UNSUPPORTED OPERATIONS ON MESSAGE BUILDER OUTPUT
 
     @Override
Index: src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/GuildImpl.java	(revision f54e392d1b3e189e28e9af1173b270bd62c729df)
@@ -23,15 +23,20 @@
 import net.dv8tion.jda.api.Region;
 import net.dv8tion.jda.api.audio.hooks.ConnectionStatus;
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.StandardSticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.entities.templates.Template;
 import net.dv8tion.jda.api.exceptions.HierarchyException;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.exceptions.ParsingException;
 import net.dv8tion.jda.api.exceptions.PermissionException;
 import net.dv8tion.jda.api.interactions.commands.Command;
 import net.dv8tion.jda.api.interactions.commands.build.CommandData;
 import net.dv8tion.jda.api.interactions.commands.privileges.CommandPrivilege;
 import net.dv8tion.jda.api.managers.AudioManager;
 import net.dv8tion.jda.api.managers.GuildManager;
+import net.dv8tion.jda.api.managers.GuildStickerManager;
 import net.dv8tion.jda.api.requests.GatewayIntent;
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.*;
@@ -39,6 +44,7 @@
 import net.dv8tion.jda.api.requests.restaction.order.ChannelOrderAction;
 import net.dv8tion.jda.api.requests.restaction.order.RoleOrderAction;
 import net.dv8tion.jda.api.requests.restaction.pagination.AuditLogPaginationAction;
+import net.dv8tion.jda.api.utils.FileUpload;
 import net.dv8tion.jda.api.utils.cache.*;
 import net.dv8tion.jda.api.utils.concurrent.Task;
 import net.dv8tion.jda.api.utils.data.DataArray;
@@ -49,6 +55,7 @@
 import net.dv8tion.jda.internal.interactions.command.CommandImpl;
 import net.dv8tion.jda.internal.managers.AudioManagerImpl;
 import net.dv8tion.jda.internal.managers.GuildManagerImpl;
+import net.dv8tion.jda.internal.managers.GuildStickerManagerImpl;
 import net.dv8tion.jda.internal.requests.*;
 import net.dv8tion.jda.internal.requests.restaction.*;
 import net.dv8tion.jda.internal.requests.restaction.order.CategoryOrderActionImpl;
@@ -62,6 +69,8 @@
 import net.dv8tion.jda.internal.utils.cache.SnowflakeCacheViewImpl;
 import net.dv8tion.jda.internal.utils.cache.SortedSnowflakeCacheViewImpl;
 import net.dv8tion.jda.internal.utils.concurrent.task.GatewayTask;
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
 
 import javax.annotation.CheckReturnValue;
@@ -89,6 +98,7 @@
     private final SortedSnowflakeCacheViewImpl<ThreadChannel> threadChannelCache = new SortedSnowflakeCacheViewImpl<>(ThreadChannel.class, Channel::getName, Comparator.naturalOrder());
     private final SortedSnowflakeCacheViewImpl<Role> roleCache = new SortedSnowflakeCacheViewImpl<>(Role.class, Role::getName, Comparator.reverseOrder());
     private final SnowflakeCacheViewImpl<Emote> emoteCache = new SnowflakeCacheViewImpl<>(Emote.class, Emote::getName);
+    private final SnowflakeCacheViewImpl<GuildSticker> stickerCache = new SnowflakeCacheViewImpl<>(GuildSticker.class, GuildSticker::getName);
     private final MemberCacheViewImpl memberCache = new MemberCacheViewImpl();
     private final CacheView.SimpleCacheView<MemberPresenceImpl> memberPresences;
 
@@ -694,6 +704,13 @@
         return emoteCache;
     }
 
+    @Nonnull
+    @Override
+    public SnowflakeCacheView<GuildSticker> getStickerCache()
+    {
+        return stickerCache;
+    }
+
     @Nonnull
     @Override
     public List<GuildChannel> getChannels(boolean includeHidden)
@@ -702,7 +719,7 @@
         Predicate<GuildChannel> filterHidden = it -> {
             //TODO-v5: Do we need to if-protected cast here? If the channel _isnt_ a IPermissionContainer, then would we even be using this filter on it?
             if (it instanceof IPermissionContainer) {
-                self.hasPermission((IPermissionContainer) it, Permission.VIEW_CHANNEL);
+                return self.hasPermission((IPermissionContainer) it, Permission.VIEW_CHANNEL);
             }
             return false;
         };
@@ -817,6 +834,58 @@
         });
     }
 
+    @Nonnull
+    @Override
+    public RestAction<List<GuildSticker>> retrieveStickers()
+    {
+        Route.CompiledRoute route = Route.Stickers.GET_GUILD_STICKERS.compile(getId());
+        return new RestActionImpl<>(getJDA(), route, (response, request) -> {
+            DataArray array = response.getArray();
+            List<GuildSticker> stickers = new ArrayList<>(array.length());
+            EntityBuilder builder = api.getEntityBuilder();
+            for (int i = 0; i < array.length(); i++)
+            {
+                DataObject object = null;
+                try
+                {
+                    object = array.getObject(i);
+                    GuildSticker sticker = (GuildSticker) builder.createRichSticker(object);
+                    stickers.add(sticker);
+                }
+                catch (ParsingException | ClassCastException ex)
+                {
+                    EntityBuilder.LOG.error("Failed to parse sticker for JSON: {}", object, ex);
+                }
+            }
+
+            return Collections.unmodifiableList(stickers);
+        });
+    }
+
+    @Nonnull
+    @Override
+    public RestAction<GuildSticker> retrieveSticker(@Nonnull StickerSnowflake sticker)
+    {
+        Checks.notNull(sticker, "Sticker");
+        Route.CompiledRoute route = Route.Stickers.GET_GUILD_STICKER.compile(getId(), sticker.getId());
+        return new RestActionImpl<>(getJDA(), route, (response, request) -> {
+            DataObject object = response.getObject();
+            EntityBuilder builder = api.getEntityBuilder();
+            return (GuildSticker) builder.createRichSticker(object);
+        });
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManager editSticker(@Nonnull StickerSnowflake sticker)
+    {
+        Checks.notNull(sticker, "Sticker");
+        if (sticker instanceof GuildSticker)
+            Checks.check(((GuildSticker) sticker).getGuildIdLong() == id, "Cannot edit a sticker from another guild!");
+        Checks.check(!(sticker instanceof StandardSticker), "Cannot edit a standard sticker.");
+        return new GuildStickerManagerImpl(this, id, sticker);
+    }
+
     @Nonnull
     @Override
     public BanPaginationActionImpl retrieveBanList()
@@ -1715,6 +1784,68 @@
         });
     }
 
+    @Nonnull
+    @Override
+    public AuditableRestAction<GuildSticker> createSticker(@Nonnull String name, @Nonnull String description, @Nonnull FileUpload file, @Nonnull Collection<String> tags)
+    {
+        checkPermission(Permission.MANAGE_EMOTES_AND_STICKERS);
+        Checks.inRange(name, 2, 30, "Name");
+        Checks.notNull(file, "File");
+        Checks.notNull(description, "Description");
+        Checks.notEmpty(tags, "Tags");
+        if (!description.isEmpty())
+            Checks.inRange(description, 2, 100, "Description");
+        for (String t : tags)
+            Checks.notEmpty(t, "Tags");
+
+        String csv = String.join(",", tags);
+        Checks.notLonger(csv, 200, "Tags");
+
+        // Extract file extension and map to media type
+        int index = file.getName().lastIndexOf('.');
+        Checks.check(index > -1, "Filename for sticker is missing file extension. Provided: '" + file.getName() + "'. Must be PNG or JSON.");
+
+        // Convert file extension to media-type
+        String extension = file.getName().substring(index + 1).toLowerCase(Locale.ROOT);
+        MediaType mediaType;
+        switch (extension)
+        {
+            case "apng":
+            case "png":
+                mediaType = Requester.MEDIA_TYPE_PNG;
+                break;
+            case "json":
+                mediaType = Requester.MEDIA_TYPE_JSON;
+                break;
+            default:
+                throw new IllegalArgumentException("Unsupported file extension: '." + extension + "', must be PNG or JSON.");
+        }
+
+        // Add sticker metadata as form parts (because payload_json is broken)
+        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);
+        builder.addFormDataPart("name", name);
+        builder.addFormDataPart("description", description);
+        builder.addFormDataPart("tags", csv);
+
+        // Attach file asset for sticker image/animation
+        builder.addFormDataPart("file", file.getName(), file.getRequestBody(mediaType));
+
+        MultipartBody body = builder.build();
+        Route.CompiledRoute route = Route.Stickers.CREATE_GUILD_STICKER.compile(getId());
+        return new AuditableRestActionImpl<>(api, route, body,
+            (response, request) -> (GuildSticker) api.getEntityBuilder().createRichSticker(response.getObject())
+        );
+    }
+
+    @Nonnull
+    @Override
+    public AuditableRestAction<Void> deleteSticker(@Nonnull StickerSnowflake id)
+    {
+        Checks.notNull(id, "Sticker");
+        Route.CompiledRoute route = Route.Stickers.DELETE_GUILD_STICKER.compile(getId(), id.getId());
+        return new AuditableRestActionImpl<>(api, route);
+    }
+
     @Nonnull
     @Override
     public ChannelOrderAction modifyCategoryPositions()
@@ -2045,6 +2176,11 @@
         return emoteCache;
     }
 
+    public SnowflakeCacheViewImpl<GuildSticker> getStickersView()
+    {
+        return stickerCache;
+    }
+
     public MemberCacheViewImpl getMembersView()
     {
         return memberCache;
Index: src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java b/src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/ReceivedMessage.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -19,6 +19,7 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.StickerItem;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.exceptions.MissingAccessException;
 import net.dv8tion.jda.api.exceptions.PermissionException;
@@ -65,7 +66,7 @@
     protected final List<MessageReaction> reactions;
     protected final List<Attachment> attachments;
     protected final List<MessageEmbed> embeds;
-    protected final List<MessageSticker> stickers;
+    protected final List<StickerItem> stickers;
     protected final List<ActionRow> components;
     protected final int flags;
     protected final Message.Interaction interaction;
@@ -81,9 +82,11 @@
 
     public ReceivedMessage(
             long id, MessageChannel channel, MessageType type, MessageReference messageReference,
-            boolean fromWebhook, boolean tts, boolean pinned, String content, String nonce, User author,
-            Member member, MessageActivity activity, OffsetDateTime editTime, Mentions mentions, List<MessageReaction> reactions,
-            List<Attachment> attachments, List<MessageEmbed> embeds, List<MessageSticker> stickers, List<ActionRow> components, int flags, Message.Interaction interaction, ThreadChannel startedThread)
+            boolean fromWebhook, boolean  tts, boolean pinned,
+            String content, String nonce, User author, Member member, MessageActivity activity, OffsetDateTime editTime,
+            Mentions mentions, List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds,
+            List<StickerItem> stickers, List<ActionRow> components,
+            int flags, Message.Interaction interaction, ThreadChannel startedThread)
     {
         super(content, nonce, tts);
         this.id = id;
@@ -554,7 +557,7 @@
 
     @Nonnull
     @Override
-    public List<MessageSticker> getStickers()
+    public List<StickerItem> getStickers()
     {
         return this.stickers;
     }
Index: src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java b/src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/SystemMessage.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -17,6 +17,7 @@
 package net.dv8tion.jda.internal.entities;
 
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.StickerItem;
 import net.dv8tion.jda.api.interactions.components.LayoutComponent;
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.MessageAction;
@@ -30,10 +31,11 @@
 public class SystemMessage extends ReceivedMessage
 {
     public SystemMessage(
-        long id, MessageChannel channel, MessageType type, MessageReference messageReference,
-        boolean fromWebhook, boolean tts, boolean pinned,
-        String content, String nonce, User author, Member member, MessageActivity activity, OffsetDateTime editTime, Mentions mentions,
-        List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds, List<MessageSticker> stickers, int flags, ThreadChannel startedThread)
+            long id, MessageChannel channel, MessageType type, MessageReference messageReference,
+            boolean fromWebhook, boolean  tts, boolean pinned,
+            String content, String nonce, User author, Member member, MessageActivity activity, OffsetDateTime editTime,
+            Mentions mentions, List<MessageReaction> reactions, List<Attachment> attachments, List<MessageEmbed> embeds,
+            List<StickerItem> stickers, int flags, ThreadChannel startedThread)
     {
         super(id, channel, type, messageReference, fromWebhook, tts, pinned, content, nonce, author, member,
                 activity, editTime, mentions, reactions, attachments, embeds, stickers, Collections.emptyList(), flags, null, startedThread);
Index: src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/GuildMessageChannelMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/GuildMessageChannelMixin.java b/src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/GuildMessageChannelMixin.java
--- a/src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/GuildMessageChannelMixin.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/mixin/channel/middleman/GuildMessageChannelMixin.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -19,11 +19,14 @@
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.GuildMessageChannel;
 import net.dv8tion.jda.api.entities.User;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.requests.RestAction;
+import net.dv8tion.jda.api.requests.restaction.MessageAction;
 import net.dv8tion.jda.api.utils.MiscUtil;
 import net.dv8tion.jda.api.utils.TimeUtil;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
 import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.internal.requests.restaction.MessageActionImpl;
 import net.dv8tion.jda.internal.utils.Checks;
 import net.dv8tion.jda.internal.utils.EncodingUtil;
 
@@ -100,7 +103,16 @@
         Route.CompiledRoute route = Route.Messages.CLEAR_EMOTE_REACTIONS.compile(getId(), messageId, code);
         return new RestActionImpl<>(getJDA(), route);
     }
-    
+
+    @Nonnull
+    @Override
+    default MessageAction sendStickers(@Nonnull Collection<? extends StickerSnowflake> stickers)
+    {
+        checkCanAccessChannel();
+        checkCanSendMessage();
+        return new MessageActionImpl(getJDA(), null, this).setStickers(stickers);
+    }
+
     // ---- Default implementation of parent mixins hooks ----
     default void checkCanAccessChannel()
     {
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/GuildStickerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/GuildStickerImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/GuildStickerImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/GuildStickerImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,168 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.JDA;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.User;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.managers.GuildStickerManager;
+import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
+import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
+import net.dv8tion.jda.internal.managers.GuildStickerManagerImpl;
+import net.dv8tion.jda.internal.requests.DeferredRestAction;
+import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.internal.requests.restaction.AuditableRestActionImpl;
+import net.dv8tion.jda.internal.utils.Helpers;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.Objects;
+import java.util.Set;
+
+public class GuildStickerImpl extends RichStickerImpl implements GuildSticker
+{
+    private final long guildId;
+    private final JDA jda;
+    private Guild guild;
+    private User owner;
+
+    private boolean available;
+
+    public GuildStickerImpl(long id, StickerFormat format, String name,
+                            Set<String> tags, String description,
+                            boolean available, long guildId, JDA jda, User owner)
+    {
+        super(id, format, name, tags, description);
+        this.available = available;
+        this.guildId = guildId;
+        this.jda = jda;
+        this.guild = jda.getGuildById(guildId);
+        this.owner = owner;
+    }
+
+    @Nonnull
+    @Override
+    public GuildSticker asGuildSticker()
+    {
+        return this;
+    }
+
+    @Override
+    public boolean isAvailable()
+    {
+        return available;
+    }
+
+    @Override
+    public long getGuildIdLong()
+    {
+        return guildId;
+    }
+
+    @Nullable
+    @Override
+    public Guild getGuild()
+    {
+        Guild realGuild = jda.getGuildById(guildId);
+        if (realGuild != null)
+            guild = realGuild;
+        return guild;
+    }
+
+    @Nullable
+    @Override
+    public User getOwner()
+    {
+        if (owner != null)
+        {
+            User realOwner = jda.getUserById(owner.getIdLong());
+            if (realOwner != null)
+                owner = realOwner;
+        }
+        return owner;
+    }
+
+    @Nonnull
+    @Override
+    public CacheRestAction<User> retrieveOwner()
+    {
+        return new DeferredRestAction<>(jda, User.class, this::getOwner,
+                () -> jda.retrieveSticker(this).map(union -> {
+                    this.owner = union.asGuildSticker().getOwner();
+                    return this.owner;
+                }));
+    }
+
+    @Nonnull
+    @Override
+    public AuditableRestAction<Void> delete()
+    {
+        if (guild != null)
+            return guild.deleteSticker(this);
+        Route.CompiledRoute route = Route.Stickers.DELETE_GUILD_STICKER.compile(getGuildId(), getId());
+        return new AuditableRestActionImpl<>(jda, route);
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManager getManager()
+    {
+        return new GuildStickerManagerImpl(getGuild(), getGuildIdLong(), this);
+    }
+
+    public GuildStickerImpl setAvailable(boolean available)
+    {
+        this.available = available;
+        return this;
+    }
+
+    public GuildStickerImpl copy()
+    {
+        return new GuildStickerImpl(id, format, name, tags, description, available, guildId, jda, owner);
+    }
+
+    @Override
+    public String toString()
+    {
+        return "GuildSticker:" + name + '(' + getId() + ", guild=" + getGuildId() + ')';
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(id, format, name, getType(), tags, description, available, guildId);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == this)
+            return true;
+        if (!(obj instanceof GuildStickerImpl))
+            return false;
+        GuildStickerImpl other = (GuildStickerImpl) obj;
+        return id == other.id
+            && format == other.format
+            && getType() == other.getType()
+            && available == other.available
+            && guildId == other.guildId
+            && Objects.equals(name, other.name)
+            && Objects.equals(description, other.description)
+            && Helpers.deepEqualsUnordered(tags, other.tags);
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/RichStickerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/RichStickerImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/RichStickerImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/RichStickerImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.RichSticker;
+import net.dv8tion.jda.api.entities.sticker.StandardSticker;
+import net.dv8tion.jda.api.entities.sticker.StickerUnion;
+
+import javax.annotation.Nonnull;
+import java.util.Collections;
+import java.util.Set;
+
+public abstract class RichStickerImpl extends StickerItemImpl implements RichSticker, StickerUnion
+{
+    protected Set<String> tags;
+    protected String description;
+
+    public RichStickerImpl(long id, StickerFormat format, String name,
+                           Set<String> tags, String description)
+    {
+        super(id, format, name);
+        this.tags = Collections.unmodifiableSet(tags);
+        this.description = description;
+    }
+
+    @Nonnull
+    @Override
+    public StandardSticker asStandardSticker()
+    {
+        throw new IllegalStateException("Cannot convert sticker of type " + getType() + " to StandardSticker!");
+    }
+
+    @Nonnull
+    @Override
+    public GuildSticker asGuildSticker()
+    {
+        throw new IllegalStateException("Cannot convert sticker of type " + getType() + " to GuildSticker!");
+    }
+
+    @Nonnull
+    @Override
+    public Set<String> getTags()
+    {
+        return tags;
+    }
+
+    @Nonnull
+    @Override
+    public String getDescription()
+    {
+        return description;
+    }
+
+
+    public RichStickerImpl setTags(Set<String> tags)
+    {
+        this.tags = Collections.unmodifiableSet(tags);
+        return this;
+    }
+
+    public RichStickerImpl setDescription(String description)
+    {
+        this.description = description;
+        return this;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "RichSticker[" + getType() + "]:" + name + '(' + getId() + ')';
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/StandardStickerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/StandardStickerImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StandardStickerImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StandardStickerImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.entities.sticker.StandardSticker;
+
+import javax.annotation.Nonnull;
+import java.util.Set;
+
+public class StandardStickerImpl extends RichStickerImpl implements StandardSticker
+{
+    private final long packId;
+    private final int sortValue;
+
+    public StandardStickerImpl(long id, StickerFormat format, String name,
+                               Set<String> tags, String description,
+                               long packId, int sortValue)
+    {
+        super(id, format, name, tags, description);
+        this.packId = packId;
+        this.sortValue = sortValue;
+    }
+
+    @Nonnull
+    @Override
+    public StandardSticker asStandardSticker()
+    {
+        return this;
+    }
+
+    @Override
+    public long getPackIdLong()
+    {
+        return packId;
+    }
+
+    @Override
+    public int getSortValue()
+    {
+        return sortValue;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "StandardSticker:" + name + '(' + getId() + ", pack=" + getPackId() + ')';
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Long.hashCode(id);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == this)
+            return true;
+        if (!(obj instanceof StandardStickerImpl))
+            return false;
+        StandardStickerImpl other = (StandardStickerImpl) obj;
+        return id == other.id; // Standard stickers shouldn't change, so we can just compare id
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerItemImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerItemImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerItemImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerItemImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.entities.sticker.StickerItem;
+
+import javax.annotation.Nonnull;
+import java.util.Objects;
+
+public class StickerItemImpl implements StickerItem
+{
+    protected final long id;
+    protected final StickerFormat format;
+    protected String name;
+
+    public StickerItemImpl(long id, StickerFormat format, String name)
+    {
+        this.id = id;
+        this.format = format;
+        this.name = name;
+    }
+
+    @Override
+    public long getIdLong()
+    {
+        return id;
+    }
+
+    @Nonnull
+    @Override
+    public StickerFormat getFormatType()
+    {
+        return format;
+    }
+
+    @Nonnull
+    @Override
+    public String getName()
+    {
+        return name;
+    }
+
+    public StickerItemImpl setName(String name)
+    {
+        this.name = name;
+        return this;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "StickerItem:" + name + '(' + getId() + ')';
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(id, format, name);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == this)
+            return true;
+        if (!(obj instanceof StickerItemImpl))
+            return false;
+        StickerItemImpl other = (StickerItemImpl) obj;
+        return id == other.id
+            && format == other.format
+            && Objects.equals(name, other.name);
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerPackImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerPackImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerPackImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerPackImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,113 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.entities.sticker.StandardSticker;
+import net.dv8tion.jda.api.entities.sticker.StickerPack;
+
+import javax.annotation.Nonnull;
+import java.util.Collections;
+import java.util.List;
+
+public class StickerPackImpl implements StickerPack
+{
+    private final long id;
+    private final List<StandardSticker> stickers;
+    private final String name, description;
+    private final long coverId, bannerId, skuId;
+
+    public StickerPackImpl(long id, List<StandardSticker> stickers,
+                           String name, String description,
+                           long coverId, long bannerId, long skuId)
+    {
+        this.id = id;
+        this.stickers = Collections.unmodifiableList(stickers);
+        this.name = name;
+        this.description = description;
+        this.coverId = coverId;
+        this.bannerId = bannerId;
+        this.skuId = skuId;
+    }
+
+    @Override
+    public long getIdLong()
+    {
+        return id;
+    }
+
+    @Nonnull
+    @Override
+    public List<StandardSticker> getStickers()
+    {
+        return stickers;
+    }
+
+    @Nonnull
+    @Override
+    public String getName()
+    {
+        return name;
+    }
+
+    @Nonnull
+    @Override
+    public String getDescription()
+    {
+        return description;
+    }
+
+    @Override
+    public long getCoverIdLong()
+    {
+        return coverId;
+    }
+
+    @Override
+    public long getBannerIdLong()
+    {
+        return bannerId;
+    }
+
+    @Override
+    public long getSkuIdLong()
+    {
+        return skuId;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "StickerPack:" + name + '(' + getId() + ')';
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Long.hashCode(id);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == this)
+            return true;
+        if (!(obj instanceof StickerPackImpl))
+            return false;
+        StickerPackImpl other = (StickerPackImpl) obj;
+        return id == other.id;
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerSnowflakeImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerSnowflakeImpl.java b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerSnowflakeImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/entities/sticker/StickerSnowflakeImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.entities.sticker;
+
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
+
+public class StickerSnowflakeImpl implements StickerSnowflake
+{
+    private final long id;
+
+    public StickerSnowflakeImpl(long id)
+    {
+        this.id = id;
+    }
+
+    @Override
+    public long getIdLong()
+    {
+        return id;
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Long.hashCode(id);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == this)
+            return true;
+        if (!(obj instanceof StickerSnowflakeImpl))
+            return false;
+        return ((StickerSnowflakeImpl) obj).id == id;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "StickerSnowflake(" + getId() + ')';
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/handle/GuildEmojisUpdateHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/handle/GuildEmojisUpdateHandler.java b/src/main/java/net/dv8tion/jda/internal/handle/GuildEmojisUpdateHandler.java
--- a/src/main/java/net/dv8tion/jda/internal/handle/GuildEmojisUpdateHandler.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/handle/GuildEmojisUpdateHandler.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -158,5 +158,4 @@
         }
 
     }
-
 }
Index: src/main/java/net/dv8tion/jda/internal/handle/GuildStickersUpdateHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/handle/GuildStickersUpdateHandler.java b/src/main/java/net/dv8tion/jda/internal/handle/GuildStickersUpdateHandler.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/handle/GuildStickersUpdateHandler.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,165 @@
+/*
+ * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.dv8tion.jda.internal.handle;
+
+import gnu.trove.map.TLongObjectMap;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.events.sticker.GuildStickerAddedEvent;
+import net.dv8tion.jda.api.events.sticker.GuildStickerRemovedEvent;
+import net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateAvailableEvent;
+import net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateDescriptionEvent;
+import net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateNameEvent;
+import net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateTagsEvent;
+import net.dv8tion.jda.api.utils.cache.CacheFlag;
+import net.dv8tion.jda.api.utils.data.DataArray;
+import net.dv8tion.jda.api.utils.data.DataObject;
+import net.dv8tion.jda.internal.JDAImpl;
+import net.dv8tion.jda.internal.entities.EntityBuilder;
+import net.dv8tion.jda.internal.entities.GuildImpl;
+import net.dv8tion.jda.internal.entities.sticker.GuildStickerImpl;
+import net.dv8tion.jda.internal.utils.Helpers;
+import net.dv8tion.jda.internal.utils.UnlockHook;
+import net.dv8tion.jda.internal.utils.cache.SnowflakeCacheViewImpl;
+import org.apache.commons.collections4.CollectionUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+public class GuildStickersUpdateHandler extends SocketHandler
+{
+    public GuildStickersUpdateHandler(JDAImpl api)
+    {
+        super(api);
+    }
+
+    @Override
+    protected Long handleInternally(DataObject content)
+    {
+        if (!getJDA().isCacheFlagSet(CacheFlag.STICKER))
+            return null;
+        final long guildId = content.getLong("guild_id");
+        if (getJDA().getGuildSetupController().isLocked(guildId))
+            return guildId;
+
+        GuildImpl guild = (GuildImpl) getJDA().getGuildById(guildId);
+        if (guild == null)
+        {
+            getJDA().getEventCache().cache(EventCache.Type.GUILD, guildId, responseNumber, allContent, this::handle);
+            return null;
+        }
+
+        DataArray array = content.getArray("stickers");
+        List<GuildSticker> oldStickers, newStickers;
+        SnowflakeCacheViewImpl<GuildSticker> stickersView = guild.getStickersView();
+        EntityBuilder builder = api.getEntityBuilder();
+        try (UnlockHook hook = stickersView.writeLock())
+        {
+            TLongObjectMap<GuildSticker> stickersMap = stickersView.getMap();
+            oldStickers = new ArrayList<>(stickersMap.valueCollection()); //snapshot of sticker cache
+            newStickers = new ArrayList<>();
+            for (int i = 0; i < array.length(); i++)
+            {
+                DataObject current = array.getObject(i);
+                final long stickerId = current.getLong("id");
+                GuildStickerImpl sticker = (GuildStickerImpl) stickersMap.get(stickerId);
+                GuildStickerImpl oldSticker = null;
+
+                if (sticker == null)
+                {
+                    sticker = (GuildStickerImpl) builder.createRichSticker(current);
+                    newStickers.add(sticker);
+                }
+                else
+                {
+                    // sticker is in our cache which is why we don't want to remove it in cleanup later
+                    oldStickers.remove(sticker);
+                    oldSticker = sticker.copy();
+                }
+
+                sticker.setName(current.getString("name"));
+                sticker.setAvailable(current.getBoolean("available"));
+                sticker.setDescription(current.getString("description", ""));
+                sticker.setTags(Helpers.setOf(current.getString("tags").split(",\\s*")));
+
+                // finally, update the sticker
+                stickersMap.put(sticker.getIdLong(), sticker);
+                // check for updated fields and fire events
+                handleReplace(guild, oldSticker, sticker);
+            }
+            for (GuildSticker e : oldStickers)
+                stickersMap.remove(e.getIdLong());
+        }
+        //cleanup old stickers that don't exist anymore
+        for (GuildSticker e : oldStickers)
+        {
+            getJDA().handleEvent(
+                new GuildStickerRemovedEvent(
+                    getJDA(), responseNumber,
+                    guild, e));
+        }
+
+        for (GuildSticker e : newStickers)
+        {
+            getJDA().handleEvent(
+                new GuildStickerAddedEvent(
+                    getJDA(), responseNumber,
+                    guild, e));
+        }
+
+        return null;
+    }
+
+    private void handleReplace(Guild guild, GuildStickerImpl oldSticker, GuildStickerImpl newSticker)
+    {
+        if (oldSticker == null || newSticker == null) return;
+
+        if (!Objects.equals(oldSticker.getName(), newSticker.getName()))
+        {
+            getJDA().handleEvent(
+                new GuildStickerUpdateNameEvent(
+                    getJDA(), responseNumber,
+                    guild, newSticker, oldSticker.getName()));
+        }
+
+        if (!Objects.equals(oldSticker.getDescription(), newSticker.getDescription()))
+        {
+            getJDA().handleEvent(
+                new GuildStickerUpdateDescriptionEvent(
+                    getJDA(), responseNumber,
+                    guild, newSticker, oldSticker.getDescription()));
+        }
+
+        if (oldSticker.isAvailable() != newSticker.isAvailable())
+        {
+            getJDA().handleEvent(
+                new GuildStickerUpdateAvailableEvent(
+                    getJDA(), responseNumber,
+                    guild, newSticker, oldSticker.isAvailable()));
+        }
+
+        if (!CollectionUtils.isEqualCollection(oldSticker.getTags(), newSticker.getTags()))
+        {
+            getJDA().handleEvent(
+                new GuildStickerUpdateTagsEvent(
+                    getJDA(), responseNumber,
+                    guild, newSticker, oldSticker.getTags()));
+        }
+
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/managers/GuildStickerManagerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/managers/GuildStickerManagerImpl.java b/src/main/java/net/dv8tion/jda/internal/managers/GuildStickerManagerImpl.java
new file mode 100644
--- /dev/null	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
+++ b/src/main/java/net/dv8tion/jda/internal/managers/GuildStickerManagerImpl.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -0,0 +1,135 @@
+package net.dv8tion.jda.internal.managers;
+
+import net.dv8tion.jda.api.Permission;
+import net.dv8tion.jda.api.entities.Guild;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
+import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
+import net.dv8tion.jda.api.managers.GuildStickerManager;
+import net.dv8tion.jda.api.utils.data.DataObject;
+import net.dv8tion.jda.internal.requests.Route;
+import net.dv8tion.jda.internal.utils.Checks;
+import okhttp3.RequestBody;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.Collection;
+
+public class GuildStickerManagerImpl extends ManagerBase<GuildStickerManager> implements GuildStickerManager
+{
+    private final Guild guild;
+    private final long guildId;
+    private String name;
+    private String description;
+    private String tags;
+
+    public GuildStickerManagerImpl(Guild guild, long guildId, StickerSnowflake sticker)
+    {
+        super(guild.getJDA(), Route.Stickers.MODIFY_GUILD_STICKER.compile(Long.toUnsignedString(guildId), sticker.getId()));
+        this.guild = guild;
+        this.guildId = guildId;
+        if (isPermissionChecksEnabled())
+            checkPermissions();
+    }
+
+    @Nullable
+    @Override
+    public Guild getGuild()
+    {
+        return guild;
+    }
+
+    @Override
+    public long getGuildIdLong()
+    {
+        return guildId;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManagerImpl reset(long fields)
+    {
+        super.reset(fields);
+        if ((fields & NAME) == NAME)
+            this.name = null;
+        if ((fields & DESCRIPTION) == DESCRIPTION)
+            this.description = null;
+        if ((fields & TAGS) == TAGS)
+            this.tags = null;
+        return this;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManagerImpl reset(long... fields)
+    {
+        super.reset(fields);
+        return this;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManagerImpl reset()
+    {
+        super.reset();
+        this.name = null;
+        this.description = null;
+        this.tags = null;
+        return this;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManager setName(@Nonnull String name)
+    {
+        Checks.inRange(name, 2, 30, "Name");
+        this.name = name;
+        set |= NAME;
+        return this;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManager setDescription(@Nonnull String description)
+    {
+        Checks.inRange(description, 2, 100, "Description");
+        this.description = description;
+        set |= DESCRIPTION;
+        return this;
+    }
+
+    @Nonnull
+    @Override
+    public GuildStickerManager setTags(@Nonnull Collection<String> tags)
+    {
+        Checks.notEmpty(tags, "Tags");
+        for (String tag : tags)
+            Checks.notEmpty(tag, "Tags"); // checks for empty and null
+        String csv = String.join(",", tags);
+        Checks.notLonger(csv, 200, "List of tags");
+        this.tags = csv;
+        set |= TAGS;
+        return this;
+    }
+
+    @Override
+    protected RequestBody finalizeData()
+    {
+        DataObject object = DataObject.empty();
+        if (shouldUpdate(NAME))
+            object.put("name", name);
+        if (shouldUpdate(DESCRIPTION))
+            object.put("description", description);
+        if (shouldUpdate(TAGS))
+            object.put("tags", tags);
+        reset();
+        return getRequestBody(object);
+    }
+
+    @Override
+    protected boolean checkPermissions()
+    {
+        if (guild != null && !guild.getSelfMember().hasPermission(Permission.MANAGE_EMOTES_AND_STICKERS))
+            throw new InsufficientPermissionException(guild, Permission.MANAGE_EMOTES_AND_STICKERS);
+        return super.checkPermissions();
+    }
+}
Index: src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java b/src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/DeferredRestAction.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -20,7 +20,9 @@
 import net.dv8tion.jda.api.exceptions.RateLimitedException;
 import net.dv8tion.jda.api.requests.RestAction;
 import net.dv8tion.jda.api.requests.restaction.AuditableRestAction;
+import net.dv8tion.jda.api.requests.restaction.CacheRestAction;
 import net.dv8tion.jda.internal.utils.Checks;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -30,13 +32,14 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
-public class DeferredRestAction<T, R extends RestAction<T>> implements AuditableRestAction<T>
+public class DeferredRestAction<T, R extends RestAction<T>> implements AuditableRestAction<T>, CacheRestAction<T>
 {
     private final JDA api;
     private final Class<T> type;
     private final Supplier<T> valueSupplier;
     private final Supplier<R> actionSupplier;
 
+    private boolean useCache = true;
     private String reason;
     private long deadline = -1;
     private BooleanSupplier isAction;
@@ -74,7 +77,7 @@
 
     @Nonnull
     @Override
-    public AuditableRestAction<T> setCheck(BooleanSupplier checks)
+    public DeferredRestAction<T, R> setCheck(BooleanSupplier checks)
     {
         this.transitiveChecks = checks;
         return this;
@@ -89,7 +92,7 @@
 
     @Nonnull
     @Override
-    public AuditableRestAction<T> timeout(long timeout, @Nonnull TimeUnit unit)
+    public DeferredRestAction<T, R> timeout(long timeout, @Nonnull TimeUnit unit)
     {
         Checks.notNull(unit, "TimeUnit");
         return deadline(timeout <= 0 ? 0 : System.currentTimeMillis() + unit.toMillis(timeout));
@@ -97,11 +100,19 @@
 
     @Nonnull
     @Override
-    public AuditableRestAction<T> deadline(long timestamp)
+    public DeferredRestAction<T, R> deadline(long timestamp)
     {
         this.deadline = timestamp;
         return this;
     }
+
+    @NotNull
+    @Override
+    public CacheRestAction<T> useCache(boolean useCache)
+    {
+        this.useCache = useCache;
+        return this;
+    }
 
     public AuditableRestAction<T> setCacheCheck(BooleanSupplier checks)
     {
@@ -129,7 +140,7 @@
         }
 
         T value = valueSupplier.get();
-        if (value == null)
+        if (!useCache || value == null)
         {
             getAction().queue(success, failure);
         }
@@ -151,7 +162,7 @@
             return CompletableFuture.completedFuture(null);
         }
         T value = valueSupplier.get();
-        if (value != null)
+        if (useCache && value != null)
             return CompletableFuture.completedFuture(value);
         return getAction().submit(shouldQueue);
     }
@@ -167,7 +178,7 @@
             return null;
         }
         T value = valueSupplier.get();
-        if (value != null)
+        if (useCache && value != null)
             return value;
         return getAction().complete(shouldQueue);
     }
Index: src/main/java/net/dv8tion/jda/internal/requests/Requester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/Requester.java b/src/main/java/net/dv8tion/jda/internal/requests/Requester.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/Requester.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/Requester.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -54,6 +54,7 @@
     public static final RequestBody EMPTY_BODY = RequestBody.create(null, new byte[0]);
     public static final MediaType MEDIA_TYPE_JSON  = MediaType.parse("application/json; charset=utf-8");
     public static final MediaType MEDIA_TYPE_OCTET = MediaType.parse("application/octet-stream; charset=utf-8");
+    public static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png");
 
     protected final JDAImpl api;
     protected final AuthorizationConfig authConfig;
Index: src/main/java/net/dv8tion/jda/internal/requests/Route.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/Route.java b/src/main/java/net/dv8tion/jda/internal/requests/Route.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/Route.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/Route.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -177,6 +177,19 @@
         public static final Route GET_EMOTE    = new Route(GET,    "guilds/{guild_id}/emojis/{emoji_id}");
     }
 
+    public static class Stickers
+    {
+        public static final Route GET_GUILD_STICKERS = new Route(GET,    "guilds/{guild_id}/stickers");
+        public static final Route GET_GUILD_STICKER =  new Route(GET,    "guilds/{guild_id}/stickers/{sticker_id}");
+
+        public static final Route MODIFY_GUILD_STICKER = new Route(PATCH,  "guilds/{guild_id}/stickers/{sticker_id}");
+        public static final Route DELETE_GUILD_STICKER = new Route(DELETE, "guilds/{guild_id}/stickers/{sticker_id}");
+        public static final Route CREATE_GUILD_STICKER = new Route(POST,   "guilds/{guild_id}/stickers");
+
+        public static final Route GET_STICKER = new Route(GET, "stickers/{sticker_id}");
+        public static final Route LIST_PACKS  = new Route(GET, "sticker-packs");
+    }
+
     public static class Webhooks
     {
         public static final Route GET_WEBHOOK          = new Route(GET,    "webhooks/{webhook_id}");
Index: src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java b/src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/WebSocketClient.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -1339,6 +1339,7 @@
         handlers.put("GUILD_ROLE_DELETE",             new GuildRoleDeleteHandler(api));
         handlers.put("GUILD_ROLE_UPDATE",             new GuildRoleUpdateHandler(api));
         handlers.put("GUILD_SYNC",                    new GuildSyncHandler(api));
+        handlers.put("GUILD_STICKERS_UPDATE",         new GuildStickersUpdateHandler(api));
         handlers.put("GUILD_UPDATE",                  new GuildUpdateHandler(api));
         handlers.put("INTERACTION_CREATE",            new InteractionCreateHandler(api));
         handlers.put("INVITE_CREATE",                 new InviteCreateHandler(api));
Index: src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java b/src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java
--- a/src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/requests/restaction/MessageActionImpl.java	(revision 2fecf6c1277483eb03fcb645e896270b40864396)
@@ -19,6 +19,8 @@
 import net.dv8tion.jda.api.JDA;
 import net.dv8tion.jda.api.Permission;
 import net.dv8tion.jda.api.entities.*;
+import net.dv8tion.jda.api.entities.sticker.GuildSticker;
+import net.dv8tion.jda.api.entities.sticker.StickerSnowflake;
 import net.dv8tion.jda.api.exceptions.InsufficientPermissionException;
 import net.dv8tion.jda.api.exceptions.MissingAccessException;
 import net.dv8tion.jda.api.interactions.InteractionHook;
@@ -31,6 +33,7 @@
 import net.dv8tion.jda.api.utils.FileUpload;
 import net.dv8tion.jda.api.utils.data.DataArray;
 import net.dv8tion.jda.api.utils.data.DataObject;
+import net.dv8tion.jda.internal.entities.DataMessage;
 import net.dv8tion.jda.internal.requests.Requester;
 import net.dv8tion.jda.internal.requests.RestActionImpl;
 import net.dv8tion.jda.internal.requests.Route;
@@ -63,6 +66,7 @@
     protected List<ActionRow> components;
     protected List<String> retainedAttachments;
     protected List<MessageEmbed> embeds = null;
+    protected List<String> stickers = null;
     protected String nonce = null;
     protected boolean tts = false, override = false;
     protected boolean failOnInvalidReply = defaultFailOnInvalidReply;
@@ -153,7 +157,8 @@
     {
         return !isEdit() // PATCH can be technically empty since you can update stuff like components or remove embeds etc
             && Helpers.isBlank(content)
-            && (embeds == null || embeds.isEmpty() || !hasPermission(Permission.MESSAGE_EMBED_LINKS));
+            && (embeds == null || embeds.isEmpty() || !hasPermission(Permission.MESSAGE_EMBED_LINKS))
+            && stickers == null;
     }
 
     @Override
@@ -175,6 +180,14 @@
             setEmbeds(embeds.stream().filter(e -> e != null && e.getType() == EmbedType.RICH).collect(Collectors.toList()));
         files.clear();
 
+        if (!isEdit())
+        {
+            if (message instanceof DataMessage)
+                setStickers(((DataMessage) message).getStickerSnowflakes());
+            else
+                setStickers(message.getStickers());
+        }
+
         components = new ArrayList<>();
         components.addAll(message.getActionRows());
         allowedMentions.applyMessage(message);
@@ -401,6 +414,42 @@
         return this;
     }
 
+    @Nonnull
+    @Override
+    public MessageAction setStickers(@Nullable Collection<? extends StickerSnowflake> stickers)
+    {
+        if (isEdit())
+            throw new IllegalStateException("Cannot edit stickers on messages!");
+        if (stickers == null || stickers.isEmpty())
+        {
+            this.stickers = new ArrayList<>();
+            return this;
+        }
+
+        if (!(channel instanceof GuildChannel))
+            throw new IllegalStateException("Cannot send stickers in direct messages!");
+        GuildChannel guildChannel = (GuildChannel) channel;
+
+        Checks.noneNull(stickers, "Stickers");
+        Checks.check(stickers.size() <= Message.MAX_STICKER_COUNT,
+                     "Cannot send more than %d stickers in a message!", Message.MAX_STICKER_COUNT);
+        for (StickerSnowflake sticker : stickers)
+        {
+            if (sticker instanceof GuildSticker)
+            {
+                GuildSticker guildSticker = (GuildSticker) sticker;
+                Checks.check(guildSticker.isAvailable(),
+                    "Cannot use unavailable sticker. The guild may have lost the boost level required to use this sticker!");
+                Checks.check(guildSticker.getGuildIdLong() == guildChannel.getGuild().getIdLong(),
+                    "Sticker must be from the same guild. Cross-guild sticker posting is not supported!");
+            }
+        }
+
+        this.stickers = stickers.stream().map(StickerSnowflake::getId).collect(Collectors.toList());
+
+        return this;
+    }
+
     @Nonnull
     @Override
     @CheckReturnValue
@@ -531,6 +580,8 @@
                 obj.put("nonce", nonce);
             if (components != null)
                 obj.put("components", DataArray.fromCollection(components));
+            if (stickers != null)
+                obj.put("sticker_ids", DataArray.fromCollection(stickers));
             if (retainedAttachments != null)
                 obj.put("attachments", DataArray.fromCollection(retainedAttachments.stream()
                         .map(id -> DataObject.empty()
Index: src/main/java/net/dv8tion/jda/internal/utils/BufferedRequestBody.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/utils/BufferedRequestBody.java b/src/main/java/net/dv8tion/jda/internal/utils/BufferedRequestBody.java
--- a/src/main/java/net/dv8tion/jda/internal/utils/BufferedRequestBody.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/utils/BufferedRequestBody.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -39,6 +39,19 @@
         this.type = type;
     }
 
+    @Nonnull
+    public BufferedRequestBody withType(@Nonnull MediaType type)
+    {
+        if (type.equals(this.type))
+            return this;
+        synchronized (source)
+        {
+            BufferedRequestBody copy = new BufferedRequestBody(source, type);
+            copy.data = data;
+            return copy;
+        }
+    }
+
     @Nullable
     @Override
     public MediaType contentType()
@@ -49,16 +62,19 @@
     @Override
     public void writeTo(@Nonnull BufferedSink sink) throws IOException
     {
-        if (data != null)
-        {
-            sink.write(data);
-            return;
-        }
+        synchronized (source)
+        {
+            if (data != null)
+            {
+                sink.write(data);
+                return;
+            }
 
-        try (BufferedSource s = Okio.buffer(source))
-        {
-            data = s.readByteArray();
-            sink.write(data);
+            try (BufferedSource s = Okio.buffer(source))
+            {
+                data = s.readByteArray();
+                sink.write(data);
+            }
         }
     }
 }
Index: src/main/java/net/dv8tion/jda/internal/utils/IOUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/internal/utils/IOUtil.java b/src/main/java/net/dv8tion/jda/internal/utils/IOUtil.java
--- a/src/main/java/net/dv8tion/jda/internal/utils/IOUtil.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ b/src/main/java/net/dv8tion/jda/internal/utils/IOUtil.java	(revision 3f4f8c5f13ab35fcc3f843f09d66eb26cb5b0091)
@@ -17,7 +17,10 @@
 package net.dv8tion.jda.internal.utils;
 
 import com.neovisionaries.ws.client.WebSocketFactory;
-import okhttp3.*;
+import okhttp3.ConnectionPool;
+import okhttp3.Dispatcher;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
 import okio.Okio;
 import org.slf4j.Logger;
 
@@ -178,7 +181,7 @@
      *
      * @return RequestBody capable of transmitting the provided InputStream of data
      */
-    public static RequestBody createRequestBody(final MediaType contentType, final InputStream stream)
+    public static BufferedRequestBody createRequestBody(final MediaType contentType, final InputStream stream)
     {
         return new BufferedRequestBody(Okio.source(stream), contentType);
     }
Index: src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java b/src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java
--- a/src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java	(revision 2fecf6c1277483eb03fcb645e896270b40864396)
+++ b/src/main/java/net/dv8tion/jda/api/entities/MessageChannel.java	(revision bb41349838ce1cece13535868a090cce3b646781)
@@ -91,7 +91,7 @@
      * and <u><b>the value might point to an already deleted message since the ID is not cleared when the message is deleted,
      * so calling {@link #retrieveMessageById(long)} with this id can result in an {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE} error</b></u>
      *
-     * @return The most recent message's id
+     * @return The most recent message's id or "0" if no messages are present
      */
     @Nonnull
     default String getLatestMessageId()
@@ -107,7 +107,7 @@
      * and <u><b>the value might point to an already deleted message since the value is not cleared when the message is deleted,
      * so calling {@link #retrieveMessageById(long)} with this id can result in an {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE} error</b></u>
      *
-     * @return The most recent message's id
+     * @return The most recent message's id or 0 if no messages are present
      */
     long getLatestMessageIdLong();
 
Index: src/main/java/net/dv8tion/jda/api/EmbedBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/EmbedBuilder.java b/src/main/java/net/dv8tion/jda/api/EmbedBuilder.java
--- a/src/main/java/net/dv8tion/jda/api/EmbedBuilder.java	(revision bb41349838ce1cece13535868a090cce3b646781)
+++ b/src/main/java/net/dv8tion/jda/api/EmbedBuilder.java	(revision 51aba0b9372af4e24708258f60b56bccb2debd69)
@@ -740,7 +740,7 @@
      *
      * @throws java.lang.IllegalArgumentException
      *         <ul>
-     *             <li>If only {@code name} or {@code value} is set. Both must be set.</li>
+     *             <li>If {@code null} is provided</li>
      *             <li>If the character limit for {@code name}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH},
      *             is exceeded.</li>
      *             <li>If the character limit for {@code value}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#VALUE_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#VALUE_MAX_LENGTH},
@@ -750,10 +750,10 @@
      * @return the builder after the field has been added
      */
     @Nonnull
-    public EmbedBuilder addField(@Nullable String name, @Nullable String value, boolean inline)
+    public EmbedBuilder addField(@Nonnull String name, @Nonnull String value, boolean inline)
     {
-        if (name == null && value == null)
-            return this;
+        Checks.notNull(name, "Name");
+        Checks.notNull(value, "Value");
         this.fields.add(new MessageEmbed.Field(name, value, inline));
         return this;
     }
Index: src/main/java/net/dv8tion/jda/api/JDABuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/JDABuilder.java b/src/main/java/net/dv8tion/jda/api/JDABuilder.java
--- a/src/main/java/net/dv8tion/jda/api/JDABuilder.java	(revision 51aba0b9372af4e24708258f60b56bccb2debd69)
+++ b/src/main/java/net/dv8tion/jda/api/JDABuilder.java	(revision 215d275d1de3bc35c40c5949c239f30decf155b9)
@@ -55,7 +55,6 @@
  */
 public class JDABuilder
 {
-    public static final int GUILD_SUBSCRIPTIONS = GatewayIntent.getRaw(GatewayIntent.GUILD_MEMBERS, GatewayIntent.GUILD_PRESENCES, GatewayIntent.GUILD_MESSAGE_TYPING);
     protected final List<Object> listeners = new LinkedList<>();
     protected final EnumSet<CacheFlag> automaticallyDisabled = EnumSet.noneOf(CacheFlag.class);
 
@@ -1410,7 +1409,7 @@
     /**
      * The {@link ChunkingFilter} to filter which guilds should use member chunking.
      *
-     * <p>If a guild is configured for chunking the {@link #setMemberCachePolicy(MemberCachePolicy)} will be ignored.
+     * <p>Use {@link #setMemberCachePolicy(MemberCachePolicy)} to configure which members to keep in cache from chunking.
      *
      * @param  filter
      *         The filter to apply
Index: src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java b/src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java
--- a/src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java	(revision 51aba0b9372af4e24708258f60b56bccb2debd69)
+++ b/src/main/java/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.java	(revision 215d275d1de3bc35c40c5949c239f30decf155b9)
@@ -89,10 +89,10 @@
     protected WebSocketFactory wsFactory = null;
     protected IAudioSendFactory audioSendFactory = null;
     protected ThreadFactory threadFactory = null;
-    protected ChunkingFilter chunkingFilter;
+    protected ChunkingFilter chunkingFilter = ChunkingFilter.ALL;
     protected MemberCachePolicy memberCachePolicy = MemberCachePolicy.ALL;
 
-    private DefaultShardManagerBuilder(@Nullable String token, int intents)
+    protected DefaultShardManagerBuilder(@Nullable String token, int intents)
     {
         this.token = token;
         this.intents = 1 | intents;
@@ -1812,9 +1812,8 @@
 
     /**
      * The {@link ChunkingFilter} to filter which guilds should use member chunking.
-     * <br>By default this uses {@link ChunkingFilter#ALL}.
      *
-     * <p>If a guild is configured for chunking the {@link #setMemberCachePolicy(MemberCachePolicy)} will be ignored.
+     * <p>Use {@link #setMemberCachePolicy(MemberCachePolicy)} to configure which members to keep in cache from chunking.
      *
      * @param  filter
      *         The filter to apply
Index: src/main/java/net/dv8tion/jda/api/entities/MessageSticker.java
===================================================================
diff --git a/src/main/java/net/dv8tion/jda/api/entities/MessageSticker.java b/src/main/java/net/dv8tion/jda/api/entities/MessageSticker.java
deleted file mode 100644
--- a/src/main/java/net/dv8tion/jda/api/entities/MessageSticker.java	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
+++ /dev/null	(revision edbc42350a1abf6c2240e82f51ee7a5c6e2b5996)
@@ -1,222 +0,0 @@
-/*
- * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package net.dv8tion.jda.api.entities;
-
-import net.dv8tion.jda.api.utils.ImageProxy;
-import net.dv8tion.jda.internal.utils.Helpers;
-
-import javax.annotation.Nonnull;
-import java.util.Set;
-
-/**
- * An object representing a sticker in a Discord message.
- *
- * @see Message#getStickers()
- */
-public class MessageSticker implements ISnowflake
-{
-    private final long id;
-    private final String name;
-    private final String description;
-    private final long packId;
-    private final StickerFormat formatType;
-    private final Set<String> tags;
-
-    /** Template for {@link #getIconUrl()} */
-    public static final String ICON_URL = "https://cdn.discordapp.com/stickers/%s.%s";
-
-    public MessageSticker(final long id, final String name, final String description, final long packId, final StickerFormat formatType, final Set<String> tags)
-    {
-        this.id = id;
-        this.name = name;
-        this.description = description;
-        this.packId = packId;
-        this.formatType = formatType;
-        this.tags = tags;
-    }
-
-    @Override
-    public long getIdLong()
-    {
-        return id;
-    }
-
-    /**
-     * The name of the sticker.
-     *
-     * @return the name of the sticker
-     */
-    @Nonnull
-    public String getName()
-    {
-        return name;
-    }
-
-    /**
-     * The description of the sticker or empty String if the sticker doesn't have one.
-     *
-     * @return Possibly-empty String containing the description of the sticker
-     */
-    @Nonnull
-    public String getDescription()
-    {
-        return description;
-    }
-
-    /**
-     * The ID of the pack the sticker is from.
-     *
-     * <p>If this sticker is from a guild, this will be the guild id instead.
-     *
-     * @return the ID of the pack the sticker is from
-     */
-    @Nonnull
-    public String getPackId()
-    {
-        return Long.toUnsignedString(getPackIdLong());
-    }
-
-    /**
-     * The ID of the pack the sticker is from.
-     *
-     * <p>If this sticker is from a guild, this will be the guild id instead.
-     *
-     * @return the ID of the pack the sticker is from
-     */
-    public long getPackIdLong()
-    {
-        return packId;
-    }
-
-    /**
-     * The url of the sticker image.
-     *
-     * @throws java.lang.IllegalStateException
-     *         If the {@link StickerFormat StickerFormat} of this sticker is {@link StickerFormat#UNKNOWN UNKNOWN}
-     *
-     * @return The image url of the sticker
-     */
-    @Nonnull
-    public String getIconUrl()
-    {
-        return Helpers.format(ICON_URL, getId(), formatType.getExtension());
-    }
-
-    /**
-     * Returns an {@link ImageProxy} for this sticker's image.
-     *
-     * @throws java.lang.IllegalStateException
-     *         If the {@link StickerFormat} of this sticker is {@link StickerFormat#UNKNOWN UNKNOWN}
-     *
-     * @return Never-null {@link ImageProxy} of this sticker's image
-     *
-     * @see    #getIconUrl()
-     */
-    @Nonnull
-    public ImageProxy getIcon()
-    {
-        return new ImageProxy(getIconUrl());
-    }
-
-    /**
-     * The {@link StickerFormat Format} of the sticker.
-     *
-     * @return the format of the sticker
-     */
-    @Nonnull
-    public StickerFormat getFormatType()
-    {
-        return formatType;
-    }
-
-    /**
-     * Set of tags of the sticker. Tags can be used instead of the name of the sticker as aliases.
-     *
-     * @return Possibly-empty unmodifiable Set of tags of the sticker
-     */
-    @Nonnull
-    public Set<String> getTags()
-    {
-        return tags;
-    }
-
-    public enum StickerFormat
-    {
-        /**
-         * The PNG format.
-         */
-        PNG(1, "png"),
-        /**
-         * The APNG format.
-         */
-        APNG(2, "apng"),
-        /**
-         * The LOTTIE format.
-         * <br>Lottie isn't a standard renderable image. It is a JSON with data that can be rendered using the lottie library.
-         *
-         * @see <a href="https://airbnb.io/lottie/">Lottie website</a>
-         */
-        LOTTIE(3, "json"),
-        /**
-         * Represents any unknown or unsupported {@link net.dv8tion.jda.api.entities.MessageSticker MessageSticker} format types.
-         */
-        UNKNOWN(-1, null);
-
-        private final int id;
-        private final String extension;
-
-        StickerFormat(final int id, final String extension)
-        {
-            this.id = id;
-            this.extension = extension;
-        }
-
-        /**
-         * The file extension used for the sticker asset.
-         *
-         * @throws java.lang.IllegalStateException
-         *         If the {@link StickerFormat StickerFormat} is {@link StickerFormat#UNKNOWN UNKNOWN}
-         *
-         * @return The file extension for this format
-         */
-        @Nonnull
-        public String getExtension()
-        {
-            if (this == UNKNOWN)
-                throw new IllegalStateException("Can only get extension of a known format");
-            return extension;
-        }
-
-        /**
-         * Resolves the specified format identifier to the StickerFormat enum constant.
-         *
-         * @param  id
-         *         The id for this format
-         *
-         * @return The representative StickerFormat or UNKNOWN if it can't be resolved
-         */
-        @Nonnull
-        public static MessageSticker.StickerFormat fromId(int id)
-        {
-            for (MessageSticker.StickerFormat stickerFormat : values())
-            {
-                if (stickerFormat.id == id)
-                    return stickerFormat;
-            }
-            return UNKNOWN;
-        }
-    }
-}
